<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\ParameterNotFoundException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class CachedApplicationContainer extends Container
{
    protected $parameters = [];

    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->syntheticIds = [
            'Monolog\\Logger' => true,
            'Psr\\Container\\ContainerInterface' => true,
            'Psr\\Http\\Message\\ServerRequestInterface' => true,
            'Reconmap\\CommandOutputParsers\\ProcessorFactory' => true,
            'Reconmap\\Services\\ApplicationConfig' => true,
            'Symfony\\Component\\EventDispatcher\\EventDispatcher' => true,
            'mysqli' => true,
        ];
        $this->methodMap = [
            'Reconmap\\Cli\\Commands\\DatabaseMigratorCommand' => 'getDatabaseMigratorCommandService',
            'Reconmap\\Cli\\Commands\\EmailProcessorCommand' => 'getEmailProcessorCommandService',
            'Reconmap\\Cli\\Commands\\TaskProcessorCommand' => 'getTaskProcessorCommandService',
            'Reconmap\\Cli\\Commands\\TestDataGeneratorCommand' => 'getTestDataGeneratorCommandService',
            'Reconmap\\Cli\\Commands\\WeeklyEmailReportSenderCommand' => 'getWeeklyEmailReportSenderCommandService',
            'Reconmap\\Controllers\\Attachments\\AttachmentsRouter' => 'getAttachmentsRouterService',
            'Reconmap\\Controllers\\Attachments\\DeleteAttachmentController' => 'getDeleteAttachmentControllerService',
            'Reconmap\\Controllers\\Attachments\\DownloadAttachmentController' => 'getDownloadAttachmentControllerService',
            'Reconmap\\Controllers\\Attachments\\GetAttachmentsController' => 'getGetAttachmentsControllerService',
            'Reconmap\\Controllers\\Attachments\\ServeAttachmentController' => 'getServeAttachmentControllerService',
            'Reconmap\\Controllers\\Attachments\\UpdateAttachmentController' => 'getUpdateAttachmentControllerService',
            'Reconmap\\Controllers\\Attachments\\UploadAttachmentController' => 'getUploadAttachmentControllerService',
            'Reconmap\\Controllers\\AuditLog\\AuditLogRouter' => 'getAuditLogRouterService',
            'Reconmap\\Controllers\\AuditLog\\GetAuditLogController' => 'getGetAuditLogControllerService',
            'Reconmap\\Controllers\\AuditLog\\GetAuditLogStatsController' => 'getGetAuditLogStatsControllerService',
            'Reconmap\\Controllers\\Auth\\AuthRouter' => 'getAuthRouterService',
            'Reconmap\\Controllers\\Auth\\LoginController' => 'getLoginControllerService',
            'Reconmap\\Controllers\\Auth\\LogoutController' => 'getLogoutControllerService',
            'Reconmap\\Controllers\\Clients\\ClientsRouter' => 'getClientsRouterService',
            'Reconmap\\Controllers\\Clients\\CreateClientController' => 'getCreateClientControllerService',
            'Reconmap\\Controllers\\Clients\\DeleteClientController' => 'getDeleteClientControllerService',
            'Reconmap\\Controllers\\Clients\\GetClientContactsController' => 'getGetClientContactsControllerService',
            'Reconmap\\Controllers\\Clients\\GetClientController' => 'getGetClientControllerService',
            'Reconmap\\Controllers\\Clients\\GetClientsController' => 'getGetClientsControllerService',
            'Reconmap\\Controllers\\Clients\\UpdateClientController' => 'getUpdateClientControllerService',
            'Reconmap\\Controllers\\Commands\\AddCommandScheduleController' => 'getAddCommandScheduleControllerService',
            'Reconmap\\Controllers\\Commands\\AddCommandUsageController' => 'getAddCommandUsageControllerService',
            'Reconmap\\Controllers\\Commands\\CommandsRouter' => 'getCommandsRouterService',
            'Reconmap\\Controllers\\Commands\\CreateCommandController' => 'getCreateCommandControllerService',
            'Reconmap\\Controllers\\Commands\\DeleteCommandController' => 'getDeleteCommandControllerService',
            'Reconmap\\Controllers\\Commands\\DeleteCommandScheduleController' => 'getDeleteCommandScheduleControllerService',
            'Reconmap\\Controllers\\Commands\\DeleteCommandUsageController' => 'getDeleteCommandUsageControllerService',
            'Reconmap\\Controllers\\Commands\\GetCommandController' => 'getGetCommandControllerService',
            'Reconmap\\Controllers\\Commands\\GetCommandOutputParsersController' => 'getGetCommandOutputParsersControllerService',
            'Reconmap\\Controllers\\Commands\\GetCommandSchedulesController' => 'getGetCommandSchedulesControllerService',
            'Reconmap\\Controllers\\Commands\\GetCommandUsageController' => 'getGetCommandUsageControllerService',
            'Reconmap\\Controllers\\Commands\\GetCommandUsagesController' => 'getGetCommandUsagesControllerService',
            'Reconmap\\Controllers\\Commands\\GetCommandsController' => 'getGetCommandsControllerService',
            'Reconmap\\Controllers\\Commands\\GetCommandsSchedulesController' => 'getGetCommandsSchedulesControllerService',
            'Reconmap\\Controllers\\Commands\\UpdateCommandController' => 'getUpdateCommandControllerService',
            'Reconmap\\Controllers\\Commands\\UploadCommandOutputController' => 'getUploadCommandOutputControllerService',
            'Reconmap\\Controllers\\Contacts\\ContactsRouter' => 'getContactsRouterService',
            'Reconmap\\Controllers\\Contacts\\CreateContactController' => 'getCreateContactControllerService',
            'Reconmap\\Controllers\\Contacts\\DeleteContactController' => 'getDeleteContactControllerService',
            'Reconmap\\Controllers\\Documents\\CreateDocumentController' => 'getCreateDocumentControllerService',
            'Reconmap\\Controllers\\Documents\\DeleteDocumentController' => 'getDeleteDocumentControllerService',
            'Reconmap\\Controllers\\Documents\\DocumentsRouter' => 'getDocumentsRouterService',
            'Reconmap\\Controllers\\Documents\\GetDocumentController' => 'getGetDocumentControllerService',
            'Reconmap\\Controllers\\Documents\\GetDocumentsController' => 'getGetDocumentsControllerService',
            'Reconmap\\Controllers\\Documents\\UpdateDocumentController' => 'getUpdateDocumentControllerService',
            'Reconmap\\Controllers\\Notes\\CreateNoteController' => 'getCreateNoteControllerService',
            'Reconmap\\Controllers\\Notes\\DeleteNoteController' => 'getDeleteNoteControllerService',
            'Reconmap\\Controllers\\Notes\\GetNotesController' => 'getGetNotesControllerService',
            'Reconmap\\Controllers\\Notes\\NotesRouter' => 'getNotesRouterService',
            'Reconmap\\Controllers\\Notifications\\DeleteNotificationController' => 'getDeleteNotificationControllerService',
            'Reconmap\\Controllers\\Notifications\\GetNotificationsController' => 'getGetNotificationsControllerService',
            'Reconmap\\Controllers\\Notifications\\NotificationsRouter' => 'getNotificationsRouterService',
            'Reconmap\\Controllers\\Notifications\\UpdateNotificationController' => 'getUpdateNotificationControllerService',
            'Reconmap\\Controllers\\Organisations\\GetOrganisationController' => 'getGetOrganisationControllerService',
            'Reconmap\\Controllers\\Organisations\\OrganisationsRouter' => 'getOrganisationsRouterService',
            'Reconmap\\Controllers\\Organisations\\UpdateOrganisationController' => 'getUpdateOrganisationControllerService',
            'Reconmap\\Controllers\\ProjectCategories\\GetProjectCategoriesController' => 'getGetProjectCategoriesControllerService',
            'Reconmap\\Controllers\\ProjectCategories\\ProjectCategoriesRouter' => 'getProjectCategoriesRouterService',
            'Reconmap\\Controllers\\Projects\\AddProjectUserController' => 'getAddProjectUserControllerService',
            'Reconmap\\Controllers\\Projects\\CloneProjectController' => 'getCloneProjectControllerService',
            'Reconmap\\Controllers\\Projects\\CreateProjectController' => 'getCreateProjectControllerService',
            'Reconmap\\Controllers\\Projects\\DeleteProjectController' => 'getDeleteProjectControllerService',
            'Reconmap\\Controllers\\Projects\\DeleteProjectUserController' => 'getDeleteProjectUserControllerService',
            'Reconmap\\Controllers\\Projects\\GetProjectController' => 'getGetProjectControllerService',
            'Reconmap\\Controllers\\Projects\\GetProjectTasksController' => 'getGetProjectTasksControllerService',
            'Reconmap\\Controllers\\Projects\\GetProjectUsersController' => 'getGetProjectUsersControllerService',
            'Reconmap\\Controllers\\Projects\\GetProjectsController' => 'getGetProjectsControllerService',
            'Reconmap\\Controllers\\Projects\\ProjectsRouter' => 'getProjectsRouterService',
            'Reconmap\\Controllers\\Projects\\UpdateProjectController' => 'getUpdateProjectControllerService',
            'Reconmap\\Controllers\\Reports\\CreateReportController' => 'getCreateReportControllerService',
            'Reconmap\\Controllers\\Reports\\CreateReportTemplateController' => 'getCreateReportTemplateControllerService',
            'Reconmap\\Controllers\\Reports\\DeleteReportController' => 'getDeleteReportControllerService',
            'Reconmap\\Controllers\\Reports\\GetReportConfigurationController' => 'getGetReportConfigurationControllerService',
            'Reconmap\\Controllers\\Reports\\GetReportPreviewController' => 'getGetReportPreviewControllerService',
            'Reconmap\\Controllers\\Reports\\GetReportTemplatesController' => 'getGetReportTemplatesControllerService',
            'Reconmap\\Controllers\\Reports\\GetReportsController' => 'getGetReportsControllerService',
            'Reconmap\\Controllers\\Reports\\ReplaceReportConfigurationController' => 'getReplaceReportConfigurationControllerService',
            'Reconmap\\Controllers\\Reports\\ReportsRouter' => 'getReportsRouterService',
            'Reconmap\\Controllers\\Reports\\SendReportController' => 'getSendReportControllerService',
            'Reconmap\\Controllers\\System\\CustomFields\\CreateCustomFieldController' => 'getCreateCustomFieldControllerService',
            'Reconmap\\Controllers\\System\\CustomFields\\CustomFieldsRouter' => 'getCustomFieldsRouterService',
            'Reconmap\\Controllers\\System\\CustomFields\\DeleteCustomFieldController' => 'getDeleteCustomFieldControllerService',
            'Reconmap\\Controllers\\System\\CustomFields\\GetCustomFieldsController' => 'getGetCustomFieldsControllerService',
            'Reconmap\\Controllers\\System\\ExportDataController' => 'getExportDataControllerService',
            'Reconmap\\Controllers\\System\\GetExportablesController' => 'getGetExportablesControllerService',
            'Reconmap\\Controllers\\System\\GetHealthController' => 'getGetHealthControllerService',
            'Reconmap\\Controllers\\System\\GetIntegrationsController' => 'getGetIntegrationsControllerService',
            'Reconmap\\Controllers\\System\\GetOpenApiYamlController' => 'getGetOpenApiYamlControllerService',
            'Reconmap\\Controllers\\System\\GetRecentSearchesController' => 'getGetRecentSearchesControllerService',
            'Reconmap\\Controllers\\System\\GetSystemUsageController' => 'getGetSystemUsageControllerService',
            'Reconmap\\Controllers\\System\\ImportDataController' => 'getImportDataControllerService',
            'Reconmap\\Controllers\\System\\SystemRouter' => 'getSystemRouterService',
            'Reconmap\\Controllers\\Targets\\CreateTargetController' => 'getCreateTargetControllerService',
            'Reconmap\\Controllers\\Targets\\DeleteTargetController' => 'getDeleteTargetControllerService',
            'Reconmap\\Controllers\\Targets\\GetTargetController' => 'getGetTargetControllerService',
            'Reconmap\\Controllers\\Targets\\GetTargetsController' => 'getGetTargetsControllerService',
            'Reconmap\\Controllers\\Targets\\TargetsRouter' => 'getTargetsRouterService',
            'Reconmap\\Controllers\\Tasks\\BulkUpdateTasksController' => 'getBulkUpdateTasksControllerService',
            'Reconmap\\Controllers\\Tasks\\CloneTaskController' => 'getCloneTaskControllerService',
            'Reconmap\\Controllers\\Tasks\\CreateTaskController' => 'getCreateTaskControllerService',
            'Reconmap\\Controllers\\Tasks\\DeleteTaskController' => 'getDeleteTaskControllerService',
            'Reconmap\\Controllers\\Tasks\\GetTaskController' => 'getGetTaskControllerService',
            'Reconmap\\Controllers\\Tasks\\GetTasksController' => 'getGetTasksControllerService',
            'Reconmap\\Controllers\\Tasks\\TasksRouter' => 'getTasksRouterService',
            'Reconmap\\Controllers\\Tasks\\UpdateTaskController' => 'getUpdateTaskControllerService',
            'Reconmap\\Controllers\\Users\\BulkUpdateUsersController' => 'getBulkUpdateUsersControllerService',
            'Reconmap\\Controllers\\Users\\CreateUserActionController' => 'getCreateUserActionControllerService',
            'Reconmap\\Controllers\\Users\\CreateUserController' => 'getCreateUserControllerService',
            'Reconmap\\Controllers\\Users\\DeleteUserController' => 'getDeleteUserControllerService',
            'Reconmap\\Controllers\\Users\\GetUserActivityController' => 'getGetUserActivityControllerService',
            'Reconmap\\Controllers\\Users\\GetUserController' => 'getGetUserControllerService',
            'Reconmap\\Controllers\\Users\\GetUsersController' => 'getGetUsersControllerService',
            'Reconmap\\Controllers\\Users\\UpdateUserController' => 'getUpdateUserControllerService',
            'Reconmap\\Controllers\\Users\\UsersRouter' => 'getUsersRouterService',
            'Reconmap\\Controllers\\Vault\\CreateVaultItemController' => 'getCreateVaultItemControllerService',
            'Reconmap\\Controllers\\Vault\\DeleteVaultItemController' => 'getDeleteVaultItemControllerService',
            'Reconmap\\Controllers\\Vault\\ReadProjectVaultController' => 'getReadProjectVaultControllerService',
            'Reconmap\\Controllers\\Vault\\ReadVaultItemController' => 'getReadVaultItemControllerService',
            'Reconmap\\Controllers\\Vault\\UpdateVaultItemController' => 'getUpdateVaultItemControllerService',
            'Reconmap\\Controllers\\Vault\\VaultRouter' => 'getVaultRouterService',
            'Reconmap\\Controllers\\Vulnerabilities\\BulkUpdateVulnerabilitiesController' => 'getBulkUpdateVulnerabilitiesControllerService',
            'Reconmap\\Controllers\\Vulnerabilities\\Categories\\CreateVulnerabilityCategoryController' => 'getCreateVulnerabilityCategoryControllerService',
            'Reconmap\\Controllers\\Vulnerabilities\\Categories\\DeleteVulnerabilityCategoryController' => 'getDeleteVulnerabilityCategoryControllerService',
            'Reconmap\\Controllers\\Vulnerabilities\\Categories\\GetVulnerabilityCategoriesController' => 'getGetVulnerabilityCategoriesControllerService',
            'Reconmap\\Controllers\\Vulnerabilities\\Categories\\GetVulnerabilityChildrenCategoriesController' => 'getGetVulnerabilityChildrenCategoriesControllerService',
            'Reconmap\\Controllers\\Vulnerabilities\\Categories\\UpdateVulnerabilityCategoryController' => 'getUpdateVulnerabilityCategoryControllerService',
            'Reconmap\\Controllers\\Vulnerabilities\\CloneVulnerabilityController' => 'getCloneVulnerabilityControllerService',
            'Reconmap\\Controllers\\Vulnerabilities\\CreateVulnerabilityController' => 'getCreateVulnerabilityControllerService',
            'Reconmap\\Controllers\\Vulnerabilities\\DeleteVulnerabilityController' => 'getDeleteVulnerabilityControllerService',
            'Reconmap\\Controllers\\Vulnerabilities\\GetVulnerabilitiesController' => 'getGetVulnerabilitiesControllerService',
            'Reconmap\\Controllers\\Vulnerabilities\\GetVulnerabilitiesStatsController' => 'getGetVulnerabilitiesStatsControllerService',
            'Reconmap\\Controllers\\Vulnerabilities\\GetVulnerabilityController' => 'getGetVulnerabilityControllerService',
            'Reconmap\\Controllers\\Vulnerabilities\\UpdateVulnerabilityController' => 'getUpdateVulnerabilityControllerService',
            'Reconmap\\Controllers\\Vulnerabilities\\VulnerabilitiesRouter' => 'getVulnerabilitiesRouterService',
            'Reconmap\\Database\\CommandTestDataGenerator' => 'getCommandTestDataGeneratorService',
            'Reconmap\\Database\\ConnectionFactory' => 'getConnectionFactoryService',
            'Reconmap\\Database\\DatabaseSchemaMigrator' => 'getDatabaseSchemaMigratorService',
            'Reconmap\\Database\\NoteTestDataGenerator' => 'getNoteTestDataGeneratorService',
            'Reconmap\\Database\\NullColumnReplacer' => 'getNullColumnReplacerService',
            'Reconmap\\Database\\ProjectTestDataGenerator' => 'getProjectTestDataGeneratorService',
            'Reconmap\\Database\\TaskTestDataGenerator' => 'getTaskTestDataGeneratorService',
            'Reconmap\\Database\\TestDataGenerator' => 'getTestDataGeneratorService',
            'Reconmap\\Database\\UserTestDataGenerator' => 'getUserTestDataGeneratorService',
            'Reconmap\\Database\\VulnerabilityTestDataGenerator' => 'getVulnerabilityTestDataGeneratorService',
            'Reconmap\\Http\\AuthMiddleware' => 'getAuthMiddlewareService',
            'Reconmap\\Http\\CorsMiddleware' => 'getCorsMiddlewareService',
            'Reconmap\\Http\\CorsResponseDecorator' => 'getCorsResponseDecoratorService',
            'Reconmap\\Http\\SecurityMiddleware' => 'getSecurityMiddlewareService',
            'Reconmap\\Http\\StaticMiddleware' => 'getStaticMiddlewareService',
            'Reconmap\\Repositories\\AttachmentRepository' => 'getAttachmentRepositoryService',
            'Reconmap\\Repositories\\AuditLogRepository' => 'getAuditLogRepositoryService',
            'Reconmap\\Repositories\\ClientContactRepository' => 'getClientContactRepositoryService',
            'Reconmap\\Repositories\\ClientRepository' => 'getClientRepositoryService',
            'Reconmap\\Repositories\\CommandRepository' => 'getCommandRepositoryService',
            'Reconmap\\Repositories\\CommandScheduleRepository' => 'getCommandScheduleRepositoryService',
            'Reconmap\\Repositories\\CommandUsageRepository' => 'getCommandUsageRepositoryService',
            'Reconmap\\Repositories\\ContactRepository' => 'getContactRepositoryService',
            'Reconmap\\Repositories\\CustomFieldRepository' => 'getCustomFieldRepositoryService',
            'Reconmap\\Repositories\\DocumentRepository' => 'getDocumentRepositoryService',
            'Reconmap\\Repositories\\Exporters\\AuditLogExporter' => 'getAuditLogExporterService',
            'Reconmap\\Repositories\\Exporters\\ClientsExporter' => 'getClientsExporterService',
            'Reconmap\\Repositories\\Exporters\\CommandsExporter' => 'getCommandsExporterService',
            'Reconmap\\Repositories\\Exporters\\DocumentsExporter' => 'getDocumentsExporterService',
            'Reconmap\\Repositories\\Exporters\\Exportables' => 'getExportablesService',
            'Reconmap\\Repositories\\Exporters\\ProjectTemplatesExporter' => 'getProjectTemplatesExporterService',
            'Reconmap\\Repositories\\Exporters\\ProjectsExporter' => 'getProjectsExporterService',
            'Reconmap\\Repositories\\Exporters\\TargetsExporter' => 'getTargetsExporterService',
            'Reconmap\\Repositories\\Exporters\\TasksExporter' => 'getTasksExporterService',
            'Reconmap\\Repositories\\Exporters\\UsersExporter' => 'getUsersExporterService',
            'Reconmap\\Repositories\\Exporters\\VulnerabilitiesExporter' => 'getVulnerabilitiesExporterService',
            'Reconmap\\Repositories\\Exporters\\VulnerabilityCategoriesExporter' => 'getVulnerabilityCategoriesExporterService',
            'Reconmap\\Repositories\\Exporters\\VulnerabilityTemplatesExporter' => 'getVulnerabilityTemplatesExporterService',
            'Reconmap\\Repositories\\Importers\\CommandsImporter' => 'getCommandsImporterService',
            'Reconmap\\Repositories\\Importers\\DocumentsImporter' => 'getDocumentsImporterService',
            'Reconmap\\Repositories\\Importers\\Importables' => 'getImportablesService',
            'Reconmap\\Repositories\\Importers\\ProjectsImporter' => 'getProjectsImporterService',
            'Reconmap\\Repositories\\Importers\\TargetsImporter' => 'getTargetsImporterService',
            'Reconmap\\Repositories\\Importers\\TasksImporter' => 'getTasksImporterService',
            'Reconmap\\Repositories\\Importers\\VulnerabilitiesImporter' => 'getVulnerabilitiesImporterService',
            'Reconmap\\Repositories\\Importers\\VulnerabilityTemplatesImporter' => 'getVulnerabilityTemplatesImporterService',
            'Reconmap\\Repositories\\IntegrationsRepository' => 'getIntegrationsRepositoryService',
            'Reconmap\\Repositories\\NoteRepository' => 'getNoteRepositoryService',
            'Reconmap\\Repositories\\NotificationsRepository' => 'getNotificationsRepositoryService',
            'Reconmap\\Repositories\\OrganisationRepository' => 'getOrganisationRepositoryService',
            'Reconmap\\Repositories\\ProjectCategoriesRepository' => 'getProjectCategoriesRepositoryService',
            'Reconmap\\Repositories\\ProjectRepository' => 'getProjectRepositoryService',
            'Reconmap\\Repositories\\ProjectTemplateRepository' => 'getProjectTemplateRepositoryService',
            'Reconmap\\Repositories\\ProjectUserRepository' => 'getProjectUserRepositoryService',
            'Reconmap\\Repositories\\ReportConfigurationRepository' => 'getReportConfigurationRepositoryService',
            'Reconmap\\Repositories\\ReportRepository' => 'getReportRepositoryService',
            'Reconmap\\Repositories\\SearchCriterias\\CommandSearchCriteria' => 'getCommandSearchCriteriaService',
            'Reconmap\\Repositories\\SearchCriterias\\ProjectSearchCriteria' => 'getProjectSearchCriteriaService',
            'Reconmap\\Repositories\\SearchCriterias\\TargetSearchCriteria' => 'getTargetSearchCriteriaService',
            'Reconmap\\Repositories\\SearchCriterias\\TaskSearchCriteria' => 'getTaskSearchCriteriaService',
            'Reconmap\\Repositories\\SearchCriterias\\VaultSearchCriteria' => 'getVaultSearchCriteriaService',
            'Reconmap\\Repositories\\SearchCriterias\\VulnerabilityCategoryCriteria' => 'getVulnerabilityCategoryCriteriaService',
            'Reconmap\\Repositories\\SearchCriterias\\VulnerabilitySearchCriteria' => 'getVulnerabilitySearchCriteriaService',
            'Reconmap\\Repositories\\TargetRepository' => 'getTargetRepositoryService',
            'Reconmap\\Repositories\\TaskRepository' => 'getTaskRepositoryService',
            'Reconmap\\Repositories\\UserRepository' => 'getUserRepositoryService',
            'Reconmap\\Repositories\\VaultRepository' => 'getVaultRepositoryService',
            'Reconmap\\Repositories\\VulnerabilityCategoryRepository' => 'getVulnerabilityCategoryRepositoryService',
            'Reconmap\\Repositories\\VulnerabilityRepository' => 'getVulnerabilityRepositoryService',
            'Reconmap\\Repositories\\VulnerabilityStatsRepository' => 'getVulnerabilityStatsRepositoryService',
            'Reconmap\\Repositories\\VulnerabilityTemplateRepository' => 'getVulnerabilityTemplateRepositoryService',
            'Reconmap\\Services\\ActivityPublisherService' => 'getActivityPublisherServiceService',
            'Reconmap\\Services\\ApplicationContainer' => 'getApplicationContainerService',
            'Reconmap\\Services\\AuditLogService' => 'getAuditLogServiceService',
            'Reconmap\\Services\\Cvss' => 'getCvssService',
            'Reconmap\\Services\\EmailService' => 'getEmailServiceService',
            'Reconmap\\Services\\Environment' => 'getEnvironmentService',
            'Reconmap\\Services\\Filesystem\\AttachmentFilePath' => 'getAttachmentFilePathService',
            'Reconmap\\Services\\Filesystem\\DirectoryChecker' => 'getDirectoryCheckerService',
            'Reconmap\\Services\\JwtPayloadCreator' => 'getJwtPayloadCreatorService',
            'Reconmap\\Services\\KeycloakService' => 'getKeycloakServiceService',
            'Reconmap\\Services\\Logging\\LoggingConfigurator' => 'getLoggingConfiguratorService',
            'Reconmap\\Services\\NetworkService' => 'getNetworkServiceService',
            'Reconmap\\Services\\ObjectCaster' => 'getObjectCasterService',
            'Reconmap\\Services\\PaginationRequestHandler' => 'getPaginationRequestHandlerService',
            'Reconmap\\Services\\PasswordGenerator' => 'getPasswordGeneratorService',
            'Reconmap\\Services\\QueueProcessor' => 'getQueueProcessorService',
            'Reconmap\\Services\\RedisServer' => 'getRedisServerService',
            'Reconmap\\Services\\Reporting\\ReportDataCollector' => 'getReportDataCollectorService',
            'Reconmap\\Services\\Reporting\\ReportGenerator' => 'getReportGeneratorService',
            'Reconmap\\Services\\Reporting\\TemplateProcessFactory' => 'getTemplateProcessFactoryService',
            'Reconmap\\Services\\Reporting\\WeeklyReportGenerator' => 'getWeeklyReportGeneratorService',
            'Reconmap\\Services\\SearchListener' => 'getSearchListenerService',
            'Reconmap\\Services\\Security\\AuthorisationService' => 'getAuthorisationServiceService',
            'Reconmap\\Services\\Security\\Permissions' => 'getPermissionsService',
            'Reconmap\\Services\\TemplateEngine' => 'getTemplateEngineService',
            'Reconmap\\Tasks\\EmailTaskProcessor' => 'getEmailTaskProcessorService',
            'Reconmap\\Tasks\\TaskResultProcessor' => 'getTaskResultProcessorService',
        ];

        $this->aliases = [];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return [
            'Reconmap\\Http\\ApplicationRequest' => true,
            'Reconmap\\Services\\QueryParams\\OrderByRequestHandler' => true,
            'Symfony\\Component\\Filesystem\\Filesystem' => true,
        ];
    }

    /**
     * Gets the public 'Reconmap\Cli\Commands\DatabaseMigratorCommand' shared autowired service.
     *
     * @return \Reconmap\Cli\Commands\DatabaseMigratorCommand
     */
    protected static function getDatabaseMigratorCommandService($container)
    {
        return $container->services['Reconmap\\Cli\\Commands\\DatabaseMigratorCommand'] = new \Reconmap\Cli\Commands\DatabaseMigratorCommand(($container->services['Reconmap\\Database\\DatabaseSchemaMigrator'] ??= new \Reconmap\Database\DatabaseSchemaMigrator(($container->services['mysqli'] ?? $container->get('mysqli', 1)), ($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)), ($container->services['Monolog\\Logger'] ?? $container->get('Monolog\\Logger', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Cli\Commands\EmailProcessorCommand' shared autowired service.
     *
     * @return \Reconmap\Cli\Commands\EmailProcessorCommand
     */
    protected static function getEmailProcessorCommandService($container)
    {
        return $container->services['Reconmap\\Cli\\Commands\\EmailProcessorCommand'] = new \Reconmap\Cli\Commands\EmailProcessorCommand(($container->services['Reconmap\\Services\\QueueProcessor'] ?? self::getQueueProcessorService($container)), ($container->services['Reconmap\\Tasks\\EmailTaskProcessor'] ??= new \Reconmap\Tasks\EmailTaskProcessor(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)), ($container->services['Monolog\\Logger'] ?? $container->get('Monolog\\Logger', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Cli\Commands\TaskProcessorCommand' shared autowired service.
     *
     * @return \Reconmap\Cli\Commands\TaskProcessorCommand
     */
    protected static function getTaskProcessorCommandService($container)
    {
        return $container->services['Reconmap\\Cli\\Commands\\TaskProcessorCommand'] = new \Reconmap\Cli\Commands\TaskProcessorCommand(($container->services['Reconmap\\Services\\QueueProcessor'] ?? self::getQueueProcessorService($container)), ($container->services['Reconmap\\Tasks\\TaskResultProcessor'] ?? self::getTaskResultProcessorService($container)));
    }

    /**
     * Gets the public 'Reconmap\Cli\Commands\TestDataGeneratorCommand' shared autowired service.
     *
     * @return \Reconmap\Cli\Commands\TestDataGeneratorCommand
     */
    protected static function getTestDataGeneratorCommandService($container)
    {
        return $container->services['Reconmap\\Cli\\Commands\\TestDataGeneratorCommand'] = new \Reconmap\Cli\Commands\TestDataGeneratorCommand(($container->services['Reconmap\\Database\\TestDataGenerator'] ?? self::getTestDataGeneratorService($container)));
    }

    /**
     * Gets the public 'Reconmap\Cli\Commands\WeeklyEmailReportSenderCommand' shared autowired service.
     *
     * @return \Reconmap\Cli\Commands\WeeklyEmailReportSenderCommand
     */
    protected static function getWeeklyEmailReportSenderCommandService($container)
    {
        return $container->services['Reconmap\\Cli\\Commands\\WeeklyEmailReportSenderCommand'] = new \Reconmap\Cli\Commands\WeeklyEmailReportSenderCommand(($container->services['Reconmap\\Services\\Reporting\\WeeklyReportGenerator'] ?? self::getWeeklyReportGeneratorService($container)));
    }

    /**
     * Gets the public 'Reconmap\Controllers\Attachments\AttachmentsRouter' shared autowired service.
     *
     * @return \Reconmap\Controllers\Attachments\AttachmentsRouter
     */
    protected static function getAttachmentsRouterService($container)
    {
        return $container->services['Reconmap\\Controllers\\Attachments\\AttachmentsRouter'] = new \Reconmap\Controllers\Attachments\AttachmentsRouter();
    }

    /**
     * Gets the public 'Reconmap\Controllers\Attachments\DeleteAttachmentController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Attachments\DeleteAttachmentController
     */
    protected static function getDeleteAttachmentControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Attachments\\DeleteAttachmentController'] = $instance = new \Reconmap\Controllers\Attachments\DeleteAttachmentController(($container->services['Reconmap\\Repositories\\AttachmentRepository'] ??= new \Reconmap\Repositories\AttachmentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\Filesystem\\AttachmentFilePath'] ??= new \Reconmap\Services\Filesystem\AttachmentFilePath(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)))), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)), ($container->privates['Symfony\\Component\\Filesystem\\Filesystem'] ??= new \Symfony\Component\Filesystem\Filesystem()));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Attachments\DownloadAttachmentController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Attachments\DownloadAttachmentController
     */
    protected static function getDownloadAttachmentControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Attachments\\DownloadAttachmentController'] = $instance = new \Reconmap\Controllers\Attachments\DownloadAttachmentController(($container->services['Reconmap\\Repositories\\AttachmentRepository'] ??= new \Reconmap\Repositories\AttachmentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\Filesystem\\AttachmentFilePath'] ??= new \Reconmap\Services\Filesystem\AttachmentFilePath(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)))), ($container->services['Reconmap\\Services\\AuditLogService'] ?? self::getAuditLogServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Attachments\GetAttachmentsController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Attachments\GetAttachmentsController
     */
    protected static function getGetAttachmentsControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Attachments\\GetAttachmentsController'] = $instance = new \Reconmap\Controllers\Attachments\GetAttachmentsController(($container->services['Reconmap\\Repositories\\AttachmentRepository'] ??= new \Reconmap\Repositories\AttachmentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Attachments\ServeAttachmentController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Attachments\ServeAttachmentController
     */
    protected static function getServeAttachmentControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Attachments\\ServeAttachmentController'] = $instance = new \Reconmap\Controllers\Attachments\ServeAttachmentController(($container->services['Reconmap\\Repositories\\AttachmentRepository'] ??= new \Reconmap\Repositories\AttachmentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\Filesystem\\AttachmentFilePath'] ??= new \Reconmap\Services\Filesystem\AttachmentFilePath(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)))), ($container->services['Reconmap\\Services\\AuditLogService'] ?? self::getAuditLogServiceService($container)), ($container->services['Reconmap\\Services\\RedisServer'] ?? self::getRedisServerService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Attachments\UpdateAttachmentController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Attachments\UpdateAttachmentController
     */
    protected static function getUpdateAttachmentControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Attachments\\UpdateAttachmentController'] = $instance = new \Reconmap\Controllers\Attachments\UpdateAttachmentController(($container->services['Reconmap\\Repositories\\AttachmentRepository'] ??= new \Reconmap\Repositories\AttachmentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\Filesystem\\AttachmentFilePath'] ??= new \Reconmap\Services\Filesystem\AttachmentFilePath(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)))), ($container->services['Reconmap\\Services\\AuditLogService'] ?? self::getAuditLogServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Attachments\UploadAttachmentController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Attachments\UploadAttachmentController
     */
    protected static function getUploadAttachmentControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Attachments\\UploadAttachmentController'] = $instance = new \Reconmap\Controllers\Attachments\UploadAttachmentController(($container->services['Reconmap\\Repositories\\AttachmentRepository'] ??= new \Reconmap\Repositories\AttachmentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\Filesystem\\AttachmentFilePath'] ??= new \Reconmap\Services\Filesystem\AttachmentFilePath(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)))), ($container->services['Reconmap\\Services\\RedisServer'] ?? self::getRedisServerService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\AuditLog\AuditLogRouter' shared autowired service.
     *
     * @return \Reconmap\Controllers\AuditLog\AuditLogRouter
     */
    protected static function getAuditLogRouterService($container)
    {
        return $container->services['Reconmap\\Controllers\\AuditLog\\AuditLogRouter'] = new \Reconmap\Controllers\AuditLog\AuditLogRouter();
    }

    /**
     * Gets the public 'Reconmap\Controllers\AuditLog\GetAuditLogController' shared autowired service.
     *
     * @return \Reconmap\Controllers\AuditLog\GetAuditLogController
     */
    protected static function getGetAuditLogControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\AuditLog\\GetAuditLogController'] = $instance = new \Reconmap\Controllers\AuditLog\GetAuditLogController(($container->services['Reconmap\\Services\\Security\\AuthorisationService'] ??= new \Reconmap\Services\Security\AuthorisationService()), ($container->services['Reconmap\\Repositories\\AuditLogRepository'] ??= new \Reconmap\Repositories\AuditLogRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\AuditLog\GetAuditLogStatsController' shared autowired service.
     *
     * @return \Reconmap\Controllers\AuditLog\GetAuditLogStatsController
     */
    protected static function getGetAuditLogStatsControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\AuditLog\\GetAuditLogStatsController'] = $instance = new \Reconmap\Controllers\AuditLog\GetAuditLogStatsController(($container->services['Reconmap\\Repositories\\AuditLogRepository'] ??= new \Reconmap\Repositories\AuditLogRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Auth\AuthRouter' shared autowired service.
     *
     * @return \Reconmap\Controllers\Auth\AuthRouter
     */
    protected static function getAuthRouterService($container)
    {
        return $container->services['Reconmap\\Controllers\\Auth\\AuthRouter'] = new \Reconmap\Controllers\Auth\AuthRouter();
    }

    /**
     * Gets the public 'Reconmap\Controllers\Auth\LoginController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Auth\LoginController
     */
    protected static function getLoginControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Auth\\LoginController'] = $instance = new \Reconmap\Controllers\Auth\LoginController(($container->services['Reconmap\\Repositories\\UserRepository'] ??= new \Reconmap\Repositories\UserRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\AuditLogService'] ?? self::getAuditLogServiceService($container)), ($container->services['Reconmap\\Services\\RedisServer'] ?? self::getRedisServerService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Auth\LogoutController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Auth\LogoutController
     */
    protected static function getLogoutControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Auth\\LogoutController'] = $instance = new \Reconmap\Controllers\Auth\LogoutController(($container->services['Reconmap\\Services\\AuditLogService'] ?? self::getAuditLogServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Clients\ClientsRouter' shared autowired service.
     *
     * @return \Reconmap\Controllers\Clients\ClientsRouter
     */
    protected static function getClientsRouterService($container)
    {
        return $container->services['Reconmap\\Controllers\\Clients\\ClientsRouter'] = new \Reconmap\Controllers\Clients\ClientsRouter();
    }

    /**
     * Gets the public 'Reconmap\Controllers\Clients\CreateClientController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Clients\CreateClientController
     */
    protected static function getCreateClientControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Clients\\CreateClientController'] = $instance = new \Reconmap\Controllers\Clients\CreateClientController(($container->services['Reconmap\\Repositories\\ClientRepository'] ??= new \Reconmap\Repositories\ClientRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Clients\DeleteClientController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Clients\DeleteClientController
     */
    protected static function getDeleteClientControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Clients\\DeleteClientController'] = $instance = new \Reconmap\Controllers\Clients\DeleteClientController(($container->services['Reconmap\\Repositories\\ClientRepository'] ??= new \Reconmap\Repositories\ClientRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Clients\GetClientContactsController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Clients\GetClientContactsController
     */
    protected static function getGetClientContactsControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Clients\\GetClientContactsController'] = $instance = new \Reconmap\Controllers\Clients\GetClientContactsController(($container->services['Reconmap\\Repositories\\ContactRepository'] ??= new \Reconmap\Repositories\ContactRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Clients\GetClientController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Clients\GetClientController
     */
    protected static function getGetClientControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Clients\\GetClientController'] = $instance = new \Reconmap\Controllers\Clients\GetClientController(($container->services['Reconmap\\Repositories\\ClientRepository'] ??= new \Reconmap\Repositories\ClientRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Clients\GetClientsController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Clients\GetClientsController
     */
    protected static function getGetClientsControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Clients\\GetClientsController'] = $instance = new \Reconmap\Controllers\Clients\GetClientsController(($container->services['Reconmap\\Services\\Security\\AuthorisationService'] ??= new \Reconmap\Services\Security\AuthorisationService()), ($container->services['Reconmap\\Repositories\\ClientRepository'] ??= new \Reconmap\Repositories\ClientRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Clients\UpdateClientController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Clients\UpdateClientController
     */
    protected static function getUpdateClientControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Clients\\UpdateClientController'] = $instance = new \Reconmap\Controllers\Clients\UpdateClientController(($container->services['Reconmap\\Services\\Security\\AuthorisationService'] ??= new \Reconmap\Services\Security\AuthorisationService()), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)), ($container->services['Reconmap\\Repositories\\ClientRepository'] ??= new \Reconmap\Repositories\ClientRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Commands\AddCommandScheduleController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Commands\AddCommandScheduleController
     */
    protected static function getAddCommandScheduleControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Commands\\AddCommandScheduleController'] = $instance = new \Reconmap\Controllers\Commands\AddCommandScheduleController(($container->services['Reconmap\\Repositories\\CommandScheduleRepository'] ??= new \Reconmap\Repositories\CommandScheduleRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Commands\AddCommandUsageController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Commands\AddCommandUsageController
     */
    protected static function getAddCommandUsageControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Commands\\AddCommandUsageController'] = $instance = new \Reconmap\Controllers\Commands\AddCommandUsageController(($container->services['Reconmap\\Repositories\\CommandUsageRepository'] ??= new \Reconmap\Repositories\CommandUsageRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Commands\CommandsRouter' shared autowired service.
     *
     * @return \Reconmap\Controllers\Commands\CommandsRouter
     */
    protected static function getCommandsRouterService($container)
    {
        return $container->services['Reconmap\\Controllers\\Commands\\CommandsRouter'] = new \Reconmap\Controllers\Commands\CommandsRouter();
    }

    /**
     * Gets the public 'Reconmap\Controllers\Commands\CreateCommandController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Commands\CreateCommandController
     */
    protected static function getCreateCommandControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Commands\\CreateCommandController'] = $instance = new \Reconmap\Controllers\Commands\CreateCommandController(($container->services['Reconmap\\Repositories\\CommandRepository'] ??= new \Reconmap\Repositories\CommandRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Commands\DeleteCommandController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Commands\DeleteCommandController
     */
    protected static function getDeleteCommandControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Commands\\DeleteCommandController'] = $instance = new \Reconmap\Controllers\Commands\DeleteCommandController(($container->services['Reconmap\\Repositories\\CommandRepository'] ??= new \Reconmap\Repositories\CommandRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Commands\DeleteCommandScheduleController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Commands\DeleteCommandScheduleController
     */
    protected static function getDeleteCommandScheduleControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Commands\\DeleteCommandScheduleController'] = $instance = new \Reconmap\Controllers\Commands\DeleteCommandScheduleController(($container->services['Reconmap\\Services\\Security\\AuthorisationService'] ??= new \Reconmap\Services\Security\AuthorisationService()), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)), ($container->services['Reconmap\\Repositories\\CommandScheduleRepository'] ??= new \Reconmap\Repositories\CommandScheduleRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Commands\DeleteCommandUsageController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Commands\DeleteCommandUsageController
     */
    protected static function getDeleteCommandUsageControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Commands\\DeleteCommandUsageController'] = $instance = new \Reconmap\Controllers\Commands\DeleteCommandUsageController(($container->services['Reconmap\\Repositories\\CommandUsageRepository'] ??= new \Reconmap\Repositories\CommandUsageRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Commands\GetCommandController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Commands\GetCommandController
     */
    protected static function getGetCommandControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Commands\\GetCommandController'] = $instance = new \Reconmap\Controllers\Commands\GetCommandController(($container->services['Reconmap\\Repositories\\CommandRepository'] ??= new \Reconmap\Repositories\CommandRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Commands\GetCommandOutputParsersController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Commands\GetCommandOutputParsersController
     */
    protected static function getGetCommandOutputParsersControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Commands\\GetCommandOutputParsersController'] = $instance = new \Reconmap\Controllers\Commands\GetCommandOutputParsersController(($container->services['Reconmap\\CommandOutputParsers\\ProcessorFactory'] ?? $container->get('Reconmap\\CommandOutputParsers\\ProcessorFactory', 1)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Commands\GetCommandSchedulesController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Commands\GetCommandSchedulesController
     */
    protected static function getGetCommandSchedulesControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Commands\\GetCommandSchedulesController'] = $instance = new \Reconmap\Controllers\Commands\GetCommandSchedulesController(($container->services['Reconmap\\Services\\Security\\AuthorisationService'] ??= new \Reconmap\Services\Security\AuthorisationService()), ($container->services['Reconmap\\Repositories\\CommandScheduleRepository'] ??= new \Reconmap\Repositories\CommandScheduleRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Commands\GetCommandUsageController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Commands\GetCommandUsageController
     */
    protected static function getGetCommandUsageControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Commands\\GetCommandUsageController'] = $instance = new \Reconmap\Controllers\Commands\GetCommandUsageController(($container->services['Reconmap\\Repositories\\CommandUsageRepository'] ??= new \Reconmap\Repositories\CommandUsageRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Commands\GetCommandUsagesController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Commands\GetCommandUsagesController
     */
    protected static function getGetCommandUsagesControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Commands\\GetCommandUsagesController'] = $instance = new \Reconmap\Controllers\Commands\GetCommandUsagesController(($container->services['Reconmap\\Services\\Security\\AuthorisationService'] ??= new \Reconmap\Services\Security\AuthorisationService()), ($container->services['Reconmap\\Repositories\\CommandUsageRepository'] ??= new \Reconmap\Repositories\CommandUsageRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Commands\GetCommandsController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Commands\GetCommandsController
     */
    protected static function getGetCommandsControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Commands\\GetCommandsController'] = $instance = new \Reconmap\Controllers\Commands\GetCommandsController(($container->services['Reconmap\\Services\\Security\\AuthorisationService'] ??= new \Reconmap\Services\Security\AuthorisationService()), ($container->services['Reconmap\\Repositories\\CommandRepository'] ??= new \Reconmap\Repositories\CommandRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\SearchCriterias\\CommandSearchCriteria'] ??= new \Reconmap\Repositories\SearchCriterias\CommandSearchCriteria()));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Commands\GetCommandsSchedulesController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Commands\GetCommandsSchedulesController
     */
    protected static function getGetCommandsSchedulesControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Commands\\GetCommandsSchedulesController'] = $instance = new \Reconmap\Controllers\Commands\GetCommandsSchedulesController(($container->services['Reconmap\\Services\\Security\\AuthorisationService'] ??= new \Reconmap\Services\Security\AuthorisationService()), ($container->services['Reconmap\\Repositories\\CommandScheduleRepository'] ??= new \Reconmap\Repositories\CommandScheduleRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Commands\UpdateCommandController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Commands\UpdateCommandController
     */
    protected static function getUpdateCommandControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Commands\\UpdateCommandController'] = $instance = new \Reconmap\Controllers\Commands\UpdateCommandController(($container->services['Reconmap\\Repositories\\CommandRepository'] ??= new \Reconmap\Repositories\CommandRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Commands\UploadCommandOutputController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Commands\UploadCommandOutputController
     */
    protected static function getUploadCommandOutputControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Commands\\UploadCommandOutputController'] = $instance = new \Reconmap\Controllers\Commands\UploadCommandOutputController(($container->services['Reconmap\\Repositories\\AttachmentRepository'] ??= new \Reconmap\Repositories\AttachmentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\Filesystem\\AttachmentFilePath'] ??= new \Reconmap\Services\Filesystem\AttachmentFilePath(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)))), ($container->services['Reconmap\\Services\\RedisServer'] ?? self::getRedisServerService($container)), ($container->services['Reconmap\\Repositories\\CommandRepository'] ??= new \Reconmap\Repositories\CommandRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\CommandUsageRepository'] ??= new \Reconmap\Repositories\CommandUsageRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Contacts\ContactsRouter' shared autowired service.
     *
     * @return \Reconmap\Controllers\Contacts\ContactsRouter
     */
    protected static function getContactsRouterService($container)
    {
        return $container->services['Reconmap\\Controllers\\Contacts\\ContactsRouter'] = new \Reconmap\Controllers\Contacts\ContactsRouter();
    }

    /**
     * Gets the public 'Reconmap\Controllers\Contacts\CreateContactController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Contacts\CreateContactController
     */
    protected static function getCreateContactControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Contacts\\CreateContactController'] = $instance = new \Reconmap\Controllers\Contacts\CreateContactController(($container->services['Reconmap\\Repositories\\ContactRepository'] ??= new \Reconmap\Repositories\ContactRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\ClientContactRepository'] ??= new \Reconmap\Repositories\ClientContactRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Contacts\DeleteContactController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Contacts\DeleteContactController
     */
    protected static function getDeleteContactControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Contacts\\DeleteContactController'] = $instance = new \Reconmap\Controllers\Contacts\DeleteContactController(($container->services['Reconmap\\Services\\Security\\AuthorisationService'] ??= new \Reconmap\Services\Security\AuthorisationService()), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)), ($container->services['Reconmap\\Repositories\\ContactRepository'] ??= new \Reconmap\Repositories\ContactRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Documents\CreateDocumentController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Documents\CreateDocumentController
     */
    protected static function getCreateDocumentControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Documents\\CreateDocumentController'] = $instance = new \Reconmap\Controllers\Documents\CreateDocumentController(($container->services['Reconmap\\Repositories\\DocumentRepository'] ??= new \Reconmap\Repositories\DocumentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Documents\DeleteDocumentController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Documents\DeleteDocumentController
     */
    protected static function getDeleteDocumentControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Documents\\DeleteDocumentController'] = $instance = new \Reconmap\Controllers\Documents\DeleteDocumentController(($container->services['Reconmap\\Services\\Security\\AuthorisationService'] ??= new \Reconmap\Services\Security\AuthorisationService()), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)), ($container->services['Reconmap\\Repositories\\DocumentRepository'] ??= new \Reconmap\Repositories\DocumentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Documents\DocumentsRouter' shared autowired service.
     *
     * @return \Reconmap\Controllers\Documents\DocumentsRouter
     */
    protected static function getDocumentsRouterService($container)
    {
        return $container->services['Reconmap\\Controllers\\Documents\\DocumentsRouter'] = new \Reconmap\Controllers\Documents\DocumentsRouter();
    }

    /**
     * Gets the public 'Reconmap\Controllers\Documents\GetDocumentController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Documents\GetDocumentController
     */
    protected static function getGetDocumentControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Documents\\GetDocumentController'] = $instance = new \Reconmap\Controllers\Documents\GetDocumentController(($container->services['Reconmap\\Repositories\\DocumentRepository'] ??= new \Reconmap\Repositories\DocumentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Documents\GetDocumentsController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Documents\GetDocumentsController
     */
    protected static function getGetDocumentsControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Documents\\GetDocumentsController'] = $instance = new \Reconmap\Controllers\Documents\GetDocumentsController(($container->services['Reconmap\\Repositories\\DocumentRepository'] ??= new \Reconmap\Repositories\DocumentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Documents\UpdateDocumentController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Documents\UpdateDocumentController
     */
    protected static function getUpdateDocumentControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Documents\\UpdateDocumentController'] = $instance = new \Reconmap\Controllers\Documents\UpdateDocumentController(($container->services['Reconmap\\Repositories\\DocumentRepository'] ??= new \Reconmap\Repositories\DocumentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Notes\CreateNoteController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Notes\CreateNoteController
     */
    protected static function getCreateNoteControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Notes\\CreateNoteController'] = $instance = new \Reconmap\Controllers\Notes\CreateNoteController(($container->services['Reconmap\\Repositories\\NoteRepository'] ??= new \Reconmap\Repositories\NoteRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Notes\DeleteNoteController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Notes\DeleteNoteController
     */
    protected static function getDeleteNoteControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Notes\\DeleteNoteController'] = $instance = new \Reconmap\Controllers\Notes\DeleteNoteController(($container->services['Reconmap\\Repositories\\NoteRepository'] ??= new \Reconmap\Repositories\NoteRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Notes\GetNotesController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Notes\GetNotesController
     */
    protected static function getGetNotesControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Notes\\GetNotesController'] = $instance = new \Reconmap\Controllers\Notes\GetNotesController(($container->services['Reconmap\\Repositories\\NoteRepository'] ??= new \Reconmap\Repositories\NoteRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Notes\NotesRouter' shared autowired service.
     *
     * @return \Reconmap\Controllers\Notes\NotesRouter
     */
    protected static function getNotesRouterService($container)
    {
        return $container->services['Reconmap\\Controllers\\Notes\\NotesRouter'] = new \Reconmap\Controllers\Notes\NotesRouter();
    }

    /**
     * Gets the public 'Reconmap\Controllers\Notifications\DeleteNotificationController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Notifications\DeleteNotificationController
     */
    protected static function getDeleteNotificationControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Notifications\\DeleteNotificationController'] = $instance = new \Reconmap\Controllers\Notifications\DeleteNotificationController(($container->services['Reconmap\\Services\\Security\\AuthorisationService'] ??= new \Reconmap\Services\Security\AuthorisationService()), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)), ($container->services['Reconmap\\Repositories\\NotificationsRepository'] ??= new \Reconmap\Repositories\NotificationsRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Notifications\GetNotificationsController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Notifications\GetNotificationsController
     */
    protected static function getGetNotificationsControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Notifications\\GetNotificationsController'] = $instance = new \Reconmap\Controllers\Notifications\GetNotificationsController(($container->services['Reconmap\\Repositories\\NotificationsRepository'] ??= new \Reconmap\Repositories\NotificationsRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Notifications\NotificationsRouter' shared autowired service.
     *
     * @return \Reconmap\Controllers\Notifications\NotificationsRouter
     */
    protected static function getNotificationsRouterService($container)
    {
        return $container->services['Reconmap\\Controllers\\Notifications\\NotificationsRouter'] = new \Reconmap\Controllers\Notifications\NotificationsRouter();
    }

    /**
     * Gets the public 'Reconmap\Controllers\Notifications\UpdateNotificationController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Notifications\UpdateNotificationController
     */
    protected static function getUpdateNotificationControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Notifications\\UpdateNotificationController'] = $instance = new \Reconmap\Controllers\Notifications\UpdateNotificationController(($container->services['Reconmap\\Services\\Security\\AuthorisationService'] ??= new \Reconmap\Services\Security\AuthorisationService()), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)), ($container->services['Reconmap\\Repositories\\NotificationsRepository'] ??= new \Reconmap\Repositories\NotificationsRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Organisations\GetOrganisationController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Organisations\GetOrganisationController
     */
    protected static function getGetOrganisationControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Organisations\\GetOrganisationController'] = $instance = new \Reconmap\Controllers\Organisations\GetOrganisationController(($container->services['Reconmap\\Repositories\\OrganisationRepository'] ??= new \Reconmap\Repositories\OrganisationRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Organisations\OrganisationsRouter' shared autowired service.
     *
     * @return \Reconmap\Controllers\Organisations\OrganisationsRouter
     */
    protected static function getOrganisationsRouterService($container)
    {
        return $container->services['Reconmap\\Controllers\\Organisations\\OrganisationsRouter'] = new \Reconmap\Controllers\Organisations\OrganisationsRouter();
    }

    /**
     * Gets the public 'Reconmap\Controllers\Organisations\UpdateOrganisationController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Organisations\UpdateOrganisationController
     */
    protected static function getUpdateOrganisationControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Organisations\\UpdateOrganisationController'] = $instance = new \Reconmap\Controllers\Organisations\UpdateOrganisationController(($container->services['Reconmap\\Repositories\\OrganisationRepository'] ??= new \Reconmap\Repositories\OrganisationRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\ProjectCategories\GetProjectCategoriesController' shared autowired service.
     *
     * @return \Reconmap\Controllers\ProjectCategories\GetProjectCategoriesController
     */
    protected static function getGetProjectCategoriesControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\ProjectCategories\\GetProjectCategoriesController'] = $instance = new \Reconmap\Controllers\ProjectCategories\GetProjectCategoriesController(($container->services['Reconmap\\Repositories\\ProjectCategoriesRepository'] ??= new \Reconmap\Repositories\ProjectCategoriesRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\ProjectCategories\ProjectCategoriesRouter' shared autowired service.
     *
     * @return \Reconmap\Controllers\ProjectCategories\ProjectCategoriesRouter
     */
    protected static function getProjectCategoriesRouterService($container)
    {
        return $container->services['Reconmap\\Controllers\\ProjectCategories\\ProjectCategoriesRouter'] = new \Reconmap\Controllers\ProjectCategories\ProjectCategoriesRouter();
    }

    /**
     * Gets the public 'Reconmap\Controllers\Projects\AddProjectUserController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Projects\AddProjectUserController
     */
    protected static function getAddProjectUserControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Projects\\AddProjectUserController'] = $instance = new \Reconmap\Controllers\Projects\AddProjectUserController(($container->services['Reconmap\\Repositories\\ProjectUserRepository'] ??= new \Reconmap\Repositories\ProjectUserRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Projects\CloneProjectController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Projects\CloneProjectController
     */
    protected static function getCloneProjectControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Projects\\CloneProjectController'] = $instance = new \Reconmap\Controllers\Projects\CloneProjectController(($container->services['Reconmap\\Repositories\\ProjectRepository'] ??= new \Reconmap\Repositories\ProjectRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Projects\CreateProjectController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Projects\CreateProjectController
     */
    protected static function getCreateProjectControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Projects\\CreateProjectController'] = $instance = new \Reconmap\Controllers\Projects\CreateProjectController(($container->services['Reconmap\\Repositories\\ProjectRepository'] ??= new \Reconmap\Repositories\ProjectRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Projects\DeleteProjectController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Projects\DeleteProjectController
     */
    protected static function getDeleteProjectControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Projects\\DeleteProjectController'] = $instance = new \Reconmap\Controllers\Projects\DeleteProjectController(($container->services['Reconmap\\Repositories\\ProjectRepository'] ??= new \Reconmap\Repositories\ProjectRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\AuditLogService'] ?? self::getAuditLogServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Projects\DeleteProjectUserController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Projects\DeleteProjectUserController
     */
    protected static function getDeleteProjectUserControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Projects\\DeleteProjectUserController'] = $instance = new \Reconmap\Controllers\Projects\DeleteProjectUserController(($container->services['Reconmap\\Repositories\\ProjectUserRepository'] ??= new \Reconmap\Repositories\ProjectUserRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Projects\GetProjectController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Projects\GetProjectController
     */
    protected static function getGetProjectControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Projects\\GetProjectController'] = $instance = new \Reconmap\Controllers\Projects\GetProjectController(($container->services['Reconmap\\Repositories\\ProjectRepository'] ??= new \Reconmap\Repositories\ProjectRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Projects\GetProjectTasksController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Projects\GetProjectTasksController
     */
    protected static function getGetProjectTasksControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Projects\\GetProjectTasksController'] = $instance = new \Reconmap\Controllers\Projects\GetProjectTasksController(($container->services['Reconmap\\Repositories\\TaskRepository'] ??= new \Reconmap\Repositories\TaskRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Projects\GetProjectUsersController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Projects\GetProjectUsersController
     */
    protected static function getGetProjectUsersControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Projects\\GetProjectUsersController'] = $instance = new \Reconmap\Controllers\Projects\GetProjectUsersController(($container->services['Reconmap\\Repositories\\UserRepository'] ??= new \Reconmap\Repositories\UserRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Projects\GetProjectsController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Projects\GetProjectsController
     */
    protected static function getGetProjectsControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Projects\\GetProjectsController'] = $instance = new \Reconmap\Controllers\Projects\GetProjectsController(($container->services['Reconmap\\Repositories\\ProjectRepository'] ??= new \Reconmap\Repositories\ProjectRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\SearchCriterias\\ProjectSearchCriteria'] ??= new \Reconmap\Repositories\SearchCriterias\ProjectSearchCriteria()), ($container->services['Symfony\\Component\\EventDispatcher\\EventDispatcher'] ?? $container->get('Symfony\\Component\\EventDispatcher\\EventDispatcher', 1)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Projects\ProjectsRouter' shared autowired service.
     *
     * @return \Reconmap\Controllers\Projects\ProjectsRouter
     */
    protected static function getProjectsRouterService($container)
    {
        return $container->services['Reconmap\\Controllers\\Projects\\ProjectsRouter'] = new \Reconmap\Controllers\Projects\ProjectsRouter();
    }

    /**
     * Gets the public 'Reconmap\Controllers\Projects\UpdateProjectController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Projects\UpdateProjectController
     */
    protected static function getUpdateProjectControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Projects\\UpdateProjectController'] = $instance = new \Reconmap\Controllers\Projects\UpdateProjectController(($container->services['Reconmap\\Repositories\\ProjectRepository'] ??= new \Reconmap\Repositories\ProjectRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Reports\CreateReportController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Reports\CreateReportController
     */
    protected static function getCreateReportControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Reports\\CreateReportController'] = $instance = new \Reconmap\Controllers\Reports\CreateReportController(($container->services['Reconmap\\Services\\Filesystem\\AttachmentFilePath'] ??= new \Reconmap\Services\Filesystem\AttachmentFilePath(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)))), ($container->services['Reconmap\\Repositories\\ProjectRepository'] ??= new \Reconmap\Repositories\ProjectRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\ReportRepository'] ??= new \Reconmap\Repositories\ReportRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\AttachmentRepository'] ??= new \Reconmap\Repositories\AttachmentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\Reporting\\ReportDataCollector'] ?? self::getReportDataCollectorService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Reports\CreateReportTemplateController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Reports\CreateReportTemplateController
     */
    protected static function getCreateReportTemplateControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Reports\\CreateReportTemplateController'] = $instance = new \Reconmap\Controllers\Reports\CreateReportTemplateController(($container->services['Reconmap\\Repositories\\AttachmentRepository'] ??= new \Reconmap\Repositories\AttachmentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\Filesystem\\AttachmentFilePath'] ??= new \Reconmap\Services\Filesystem\AttachmentFilePath(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)))), ($container->services['Reconmap\\Services\\RedisServer'] ?? self::getRedisServerService($container)), ($container->services['Reconmap\\Repositories\\ReportRepository'] ??= new \Reconmap\Repositories\ReportRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Reports\DeleteReportController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Reports\DeleteReportController
     */
    protected static function getDeleteReportControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Reports\\DeleteReportController'] = $instance = new \Reconmap\Controllers\Reports\DeleteReportController(($container->services['Reconmap\\Services\\Filesystem\\AttachmentFilePath'] ??= new \Reconmap\Services\Filesystem\AttachmentFilePath(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)))), ($container->services['Reconmap\\Repositories\\ReportRepository'] ??= new \Reconmap\Repositories\ReportRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\AttachmentRepository'] ??= new \Reconmap\Repositories\AttachmentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->privates['Symfony\\Component\\Filesystem\\Filesystem'] ??= new \Symfony\Component\Filesystem\Filesystem()));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Reports\GetReportConfigurationController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Reports\GetReportConfigurationController
     */
    protected static function getGetReportConfigurationControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Reports\\GetReportConfigurationController'] = $instance = new \Reconmap\Controllers\Reports\GetReportConfigurationController(($container->services['Reconmap\\Repositories\\ReportConfigurationRepository'] ??= new \Reconmap\Repositories\ReportConfigurationRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Reports\GetReportPreviewController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Reports\GetReportPreviewController
     */
    protected static function getGetReportPreviewControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Reports\\GetReportPreviewController'] = $instance = new \Reconmap\Controllers\Reports\GetReportPreviewController(($container->services['Reconmap\\Services\\Reporting\\ReportGenerator'] ?? self::getReportGeneratorService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Reports\GetReportTemplatesController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Reports\GetReportTemplatesController
     */
    protected static function getGetReportTemplatesControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Reports\\GetReportTemplatesController'] = $instance = new \Reconmap\Controllers\Reports\GetReportTemplatesController(($container->services['Reconmap\\Repositories\\ReportRepository'] ??= new \Reconmap\Repositories\ReportRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Reports\GetReportsController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Reports\GetReportsController
     */
    protected static function getGetReportsControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Reports\\GetReportsController'] = $instance = new \Reconmap\Controllers\Reports\GetReportsController(($container->services['Reconmap\\Repositories\\ReportRepository'] ??= new \Reconmap\Repositories\ReportRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Reports\ReplaceReportConfigurationController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Reports\ReplaceReportConfigurationController
     */
    protected static function getReplaceReportConfigurationControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Reports\\ReplaceReportConfigurationController'] = $instance = new \Reconmap\Controllers\Reports\ReplaceReportConfigurationController(($container->services['Reconmap\\Repositories\\ReportConfigurationRepository'] ??= new \Reconmap\Repositories\ReportConfigurationRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Reports\ReportsRouter' shared autowired service.
     *
     * @return \Reconmap\Controllers\Reports\ReportsRouter
     */
    protected static function getReportsRouterService($container)
    {
        return $container->services['Reconmap\\Controllers\\Reports\\ReportsRouter'] = new \Reconmap\Controllers\Reports\ReportsRouter();
    }

    /**
     * Gets the public 'Reconmap\Controllers\Reports\SendReportController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Reports\SendReportController
     */
    protected static function getSendReportControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Reports\\SendReportController'] = $instance = new \Reconmap\Controllers\Reports\SendReportController(($container->services['Reconmap\\Services\\Filesystem\\AttachmentFilePath'] ??= new \Reconmap\Services\Filesystem\AttachmentFilePath(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)))), ($container->services['Reconmap\\Repositories\\AttachmentRepository'] ??= new \Reconmap\Repositories\AttachmentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\EmailService'] ?? self::getEmailServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\System\CustomFields\CreateCustomFieldController' shared autowired service.
     *
     * @return \Reconmap\Controllers\System\CustomFields\CreateCustomFieldController
     */
    protected static function getCreateCustomFieldControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\System\\CustomFields\\CreateCustomFieldController'] = $instance = new \Reconmap\Controllers\System\CustomFields\CreateCustomFieldController(($container->services['Reconmap\\Repositories\\CustomFieldRepository'] ??= new \Reconmap\Repositories\CustomFieldRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\System\CustomFields\CustomFieldsRouter' shared autowired service.
     *
     * @return \Reconmap\Controllers\System\CustomFields\CustomFieldsRouter
     */
    protected static function getCustomFieldsRouterService($container)
    {
        return $container->services['Reconmap\\Controllers\\System\\CustomFields\\CustomFieldsRouter'] = new \Reconmap\Controllers\System\CustomFields\CustomFieldsRouter();
    }

    /**
     * Gets the public 'Reconmap\Controllers\System\CustomFields\DeleteCustomFieldController' shared autowired service.
     *
     * @return \Reconmap\Controllers\System\CustomFields\DeleteCustomFieldController
     */
    protected static function getDeleteCustomFieldControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\System\\CustomFields\\DeleteCustomFieldController'] = $instance = new \Reconmap\Controllers\System\CustomFields\DeleteCustomFieldController(($container->services['Reconmap\\Services\\Security\\AuthorisationService'] ??= new \Reconmap\Services\Security\AuthorisationService()), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)), ($container->services['Reconmap\\Repositories\\CustomFieldRepository'] ??= new \Reconmap\Repositories\CustomFieldRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\System\CustomFields\GetCustomFieldsController' shared autowired service.
     *
     * @return \Reconmap\Controllers\System\CustomFields\GetCustomFieldsController
     */
    protected static function getGetCustomFieldsControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\System\\CustomFields\\GetCustomFieldsController'] = $instance = new \Reconmap\Controllers\System\CustomFields\GetCustomFieldsController(($container->services['Reconmap\\Repositories\\CustomFieldRepository'] ??= new \Reconmap\Repositories\CustomFieldRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\System\ExportDataController' shared autowired service.
     *
     * @return \Reconmap\Controllers\System\ExportDataController
     */
    protected static function getExportDataControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\System\\ExportDataController'] = $instance = new \Reconmap\Controllers\System\ExportDataController(($container->services['Reconmap\\Services\\AuditLogService'] ?? self::getAuditLogServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\System\GetExportablesController' shared autowired service.
     *
     * @return \Reconmap\Controllers\System\GetExportablesController
     */
    protected static function getGetExportablesControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\System\\GetExportablesController'] = $instance = new \Reconmap\Controllers\System\GetExportablesController();

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\System\GetHealthController' shared autowired service.
     *
     * @return \Reconmap\Controllers\System\GetHealthController
     */
    protected static function getGetHealthControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\System\\GetHealthController'] = $instance = new \Reconmap\Controllers\System\GetHealthController(($container->services['Reconmap\\Services\\Filesystem\\AttachmentFilePath'] ??= new \Reconmap\Services\Filesystem\AttachmentFilePath(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)))), ($container->services['Reconmap\\Services\\Filesystem\\DirectoryChecker'] ??= new \Reconmap\Services\Filesystem\DirectoryChecker()), ($container->services['mysqli'] ?? $container->get('mysqli', 1)), ($container->services['Reconmap\\Services\\RedisServer'] ?? self::getRedisServerService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\System\GetIntegrationsController' shared autowired service.
     *
     * @return \Reconmap\Controllers\System\GetIntegrationsController
     */
    protected static function getGetIntegrationsControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\System\\GetIntegrationsController'] = $instance = new \Reconmap\Controllers\System\GetIntegrationsController(($container->services['Reconmap\\Repositories\\IntegrationsRepository'] ??= new \Reconmap\Repositories\IntegrationsRepository(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)), ($container->services['Reconmap\\CommandOutputParsers\\ProcessorFactory'] ?? $container->get('Reconmap\\CommandOutputParsers\\ProcessorFactory', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\System\GetOpenApiYamlController' shared autowired service.
     *
     * @return \Reconmap\Controllers\System\GetOpenApiYamlController
     */
    protected static function getGetOpenApiYamlControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\System\\GetOpenApiYamlController'] = $instance = new \Reconmap\Controllers\System\GetOpenApiYamlController(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\System\GetRecentSearchesController' shared autowired service.
     *
     * @return \Reconmap\Controllers\System\GetRecentSearchesController
     */
    protected static function getGetRecentSearchesControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\System\\GetRecentSearchesController'] = $instance = new \Reconmap\Controllers\System\GetRecentSearchesController(($container->services['Reconmap\\Services\\RedisServer'] ?? self::getRedisServerService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\System\GetSystemUsageController' shared autowired service.
     *
     * @return \Reconmap\Controllers\System\GetSystemUsageController
     */
    protected static function getGetSystemUsageControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\System\\GetSystemUsageController'] = $instance = new \Reconmap\Controllers\System\GetSystemUsageController(($container->services['Reconmap\\Repositories\\AttachmentRepository'] ??= new \Reconmap\Repositories\AttachmentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\RedisServer'] ?? self::getRedisServerService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\System\ImportDataController' shared autowired service.
     *
     * @return \Reconmap\Controllers\System\ImportDataController
     */
    protected static function getImportDataControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\System\\ImportDataController'] = $instance = new \Reconmap\Controllers\System\ImportDataController(($container->services['Reconmap\\Services\\AuditLogService'] ?? self::getAuditLogServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\System\SystemRouter' shared autowired service.
     *
     * @return \Reconmap\Controllers\System\SystemRouter
     */
    protected static function getSystemRouterService($container)
    {
        return $container->services['Reconmap\\Controllers\\System\\SystemRouter'] = new \Reconmap\Controllers\System\SystemRouter();
    }

    /**
     * Gets the public 'Reconmap\Controllers\Targets\CreateTargetController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Targets\CreateTargetController
     */
    protected static function getCreateTargetControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Targets\\CreateTargetController'] = $instance = new \Reconmap\Controllers\Targets\CreateTargetController(($container->services['Reconmap\\Repositories\\TargetRepository'] ??= new \Reconmap\Repositories\TargetRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Targets\DeleteTargetController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Targets\DeleteTargetController
     */
    protected static function getDeleteTargetControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Targets\\DeleteTargetController'] = $instance = new \Reconmap\Controllers\Targets\DeleteTargetController(($container->services['Reconmap\\Repositories\\TargetRepository'] ??= new \Reconmap\Repositories\TargetRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\AuditLogService'] ?? self::getAuditLogServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Targets\GetTargetController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Targets\GetTargetController
     */
    protected static function getGetTargetControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Targets\\GetTargetController'] = $instance = new \Reconmap\Controllers\Targets\GetTargetController(($container->services['Reconmap\\Repositories\\TargetRepository'] ??= new \Reconmap\Repositories\TargetRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Targets\GetTargetsController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Targets\GetTargetsController
     */
    protected static function getGetTargetsControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Targets\\GetTargetsController'] = $instance = new \Reconmap\Controllers\Targets\GetTargetsController(($container->services['Reconmap\\Repositories\\TargetRepository'] ??= new \Reconmap\Repositories\TargetRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\SearchCriterias\\TargetSearchCriteria'] ??= new \Reconmap\Repositories\SearchCriterias\TargetSearchCriteria()));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Targets\TargetsRouter' shared autowired service.
     *
     * @return \Reconmap\Controllers\Targets\TargetsRouter
     */
    protected static function getTargetsRouterService($container)
    {
        return $container->services['Reconmap\\Controllers\\Targets\\TargetsRouter'] = new \Reconmap\Controllers\Targets\TargetsRouter();
    }

    /**
     * Gets the public 'Reconmap\Controllers\Tasks\BulkUpdateTasksController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Tasks\BulkUpdateTasksController
     */
    protected static function getBulkUpdateTasksControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Tasks\\BulkUpdateTasksController'] = $instance = new \Reconmap\Controllers\Tasks\BulkUpdateTasksController(($container->services['Reconmap\\Repositories\\TaskRepository'] ??= new \Reconmap\Repositories\TaskRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\AuditLogService'] ?? self::getAuditLogServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Tasks\CloneTaskController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Tasks\CloneTaskController
     */
    protected static function getCloneTaskControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Tasks\\CloneTaskController'] = $instance = new \Reconmap\Controllers\Tasks\CloneTaskController(($container->services['Reconmap\\Repositories\\TaskRepository'] ??= new \Reconmap\Repositories\TaskRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Tasks\CreateTaskController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Tasks\CreateTaskController
     */
    protected static function getCreateTaskControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Tasks\\CreateTaskController'] = $instance = new \Reconmap\Controllers\Tasks\CreateTaskController(($container->services['Reconmap\\Repositories\\TaskRepository'] ??= new \Reconmap\Repositories\TaskRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Tasks\DeleteTaskController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Tasks\DeleteTaskController
     */
    protected static function getDeleteTaskControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Tasks\\DeleteTaskController'] = $instance = new \Reconmap\Controllers\Tasks\DeleteTaskController(($container->services['Reconmap\\Repositories\\TaskRepository'] ??= new \Reconmap\Repositories\TaskRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Tasks\GetTaskController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Tasks\GetTaskController
     */
    protected static function getGetTaskControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Tasks\\GetTaskController'] = $instance = new \Reconmap\Controllers\Tasks\GetTaskController(($container->services['Reconmap\\Repositories\\TaskRepository'] ??= new \Reconmap\Repositories\TaskRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Tasks\GetTasksController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Tasks\GetTasksController
     */
    protected static function getGetTasksControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Tasks\\GetTasksController'] = $instance = new \Reconmap\Controllers\Tasks\GetTasksController(($container->services['Reconmap\\Repositories\\TaskRepository'] ??= new \Reconmap\Repositories\TaskRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\SearchCriterias\\TaskSearchCriteria'] ??= new \Reconmap\Repositories\SearchCriterias\TaskSearchCriteria()));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Tasks\TasksRouter' shared autowired service.
     *
     * @return \Reconmap\Controllers\Tasks\TasksRouter
     */
    protected static function getTasksRouterService($container)
    {
        return $container->services['Reconmap\\Controllers\\Tasks\\TasksRouter'] = new \Reconmap\Controllers\Tasks\TasksRouter();
    }

    /**
     * Gets the public 'Reconmap\Controllers\Tasks\UpdateTaskController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Tasks\UpdateTaskController
     */
    protected static function getUpdateTaskControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Tasks\\UpdateTaskController'] = $instance = new \Reconmap\Controllers\Tasks\UpdateTaskController(($container->services['Reconmap\\Repositories\\TaskRepository'] ??= new \Reconmap\Repositories\TaskRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Users\BulkUpdateUsersController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Users\BulkUpdateUsersController
     */
    protected static function getBulkUpdateUsersControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Users\\BulkUpdateUsersController'] = $instance = new \Reconmap\Controllers\Users\BulkUpdateUsersController(($container->services['Reconmap\\Repositories\\UserRepository'] ??= new \Reconmap\Repositories\UserRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\AuditLogService'] ?? self::getAuditLogServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Users\CreateUserActionController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Users\CreateUserActionController
     */
    protected static function getCreateUserActionControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Users\\CreateUserActionController'] = $instance = new \Reconmap\Controllers\Users\CreateUserActionController(($container->services['Reconmap\\Repositories\\UserRepository'] ??= new \Reconmap\Repositories\UserRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\KeycloakService'] ??= new \Reconmap\Services\KeycloakService(($container->services['Monolog\\Logger'] ?? $container->get('Monolog\\Logger', 1)), ($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)))), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Users\CreateUserController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Users\CreateUserController
     */
    protected static function getCreateUserControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Users\\CreateUserController'] = $instance = new \Reconmap\Controllers\Users\CreateUserController(($container->services['Reconmap\\Services\\KeycloakService'] ??= new \Reconmap\Services\KeycloakService(($container->services['Monolog\\Logger'] ?? $container->get('Monolog\\Logger', 1)), ($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)))), ($container->services['Reconmap\\Repositories\\UserRepository'] ??= new \Reconmap\Repositories\UserRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\PasswordGenerator'] ??= new \Reconmap\Services\PasswordGenerator()), ($container->services['Reconmap\\Services\\EmailService'] ?? self::getEmailServiceService($container)), ($container->services['Reconmap\\Services\\AuditLogService'] ?? self::getAuditLogServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Users\DeleteUserController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Users\DeleteUserController
     */
    protected static function getDeleteUserControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Users\\DeleteUserController'] = $instance = new \Reconmap\Controllers\Users\DeleteUserController(($container->services['Reconmap\\Repositories\\UserRepository'] ??= new \Reconmap\Repositories\UserRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\KeycloakService'] ??= new \Reconmap\Services\KeycloakService(($container->services['Monolog\\Logger'] ?? $container->get('Monolog\\Logger', 1)), ($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)))), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Users\GetUserActivityController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Users\GetUserActivityController
     */
    protected static function getGetUserActivityControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Users\\GetUserActivityController'] = $instance = new \Reconmap\Controllers\Users\GetUserActivityController(($container->services['Reconmap\\Repositories\\AuditLogRepository'] ??= new \Reconmap\Repositories\AuditLogRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Users\GetUserController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Users\GetUserController
     */
    protected static function getGetUserControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Users\\GetUserController'] = $instance = new \Reconmap\Controllers\Users\GetUserController(($container->services['Reconmap\\Repositories\\UserRepository'] ??= new \Reconmap\Repositories\UserRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Users\GetUsersController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Users\GetUsersController
     */
    protected static function getGetUsersControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Users\\GetUsersController'] = $instance = new \Reconmap\Controllers\Users\GetUsersController(($container->services['Reconmap\\Services\\Security\\AuthorisationService'] ??= new \Reconmap\Services\Security\AuthorisationService()), ($container->services['Reconmap\\Repositories\\UserRepository'] ??= new \Reconmap\Repositories\UserRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Users\UpdateUserController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Users\UpdateUserController
     */
    protected static function getUpdateUserControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Users\\UpdateUserController'] = $instance = new \Reconmap\Controllers\Users\UpdateUserController(($container->services['Reconmap\\Repositories\\UserRepository'] ??= new \Reconmap\Repositories\UserRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\EmailService'] ?? self::getEmailServiceService($container)), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Users\UsersRouter' shared autowired service.
     *
     * @return \Reconmap\Controllers\Users\UsersRouter
     */
    protected static function getUsersRouterService($container)
    {
        return $container->services['Reconmap\\Controllers\\Users\\UsersRouter'] = new \Reconmap\Controllers\Users\UsersRouter();
    }

    /**
     * Gets the public 'Reconmap\Controllers\Vault\CreateVaultItemController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Vault\CreateVaultItemController
     */
    protected static function getCreateVaultItemControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Vault\\CreateVaultItemController'] = $instance = new \Reconmap\Controllers\Vault\CreateVaultItemController(($container->services['Reconmap\\Repositories\\VaultRepository'] ??= new \Reconmap\Repositories\VaultRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\AuditLogService'] ?? self::getAuditLogServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Vault\DeleteVaultItemController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Vault\DeleteVaultItemController
     */
    protected static function getDeleteVaultItemControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Vault\\DeleteVaultItemController'] = $instance = new \Reconmap\Controllers\Vault\DeleteVaultItemController(($container->services['Reconmap\\Repositories\\VaultRepository'] ??= new \Reconmap\Repositories\VaultRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\AuditLogService'] ?? self::getAuditLogServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Vault\ReadProjectVaultController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Vault\ReadProjectVaultController
     */
    protected static function getReadProjectVaultControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Vault\\ReadProjectVaultController'] = $instance = new \Reconmap\Controllers\Vault\ReadProjectVaultController(($container->services['Reconmap\\Repositories\\VaultRepository'] ??= new \Reconmap\Repositories\VaultRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Vault\ReadVaultItemController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Vault\ReadVaultItemController
     */
    protected static function getReadVaultItemControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Vault\\ReadVaultItemController'] = $instance = new \Reconmap\Controllers\Vault\ReadVaultItemController(($container->services['Reconmap\\Repositories\\VaultRepository'] ??= new \Reconmap\Repositories\VaultRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\AuditLogService'] ?? self::getAuditLogServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Vault\UpdateVaultItemController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Vault\UpdateVaultItemController
     */
    protected static function getUpdateVaultItemControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Vault\\UpdateVaultItemController'] = $instance = new \Reconmap\Controllers\Vault\UpdateVaultItemController(($container->services['Reconmap\\Repositories\\VaultRepository'] ??= new \Reconmap\Repositories\VaultRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\AuditLogService'] ?? self::getAuditLogServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Vault\VaultRouter' shared autowired service.
     *
     * @return \Reconmap\Controllers\Vault\VaultRouter
     */
    protected static function getVaultRouterService($container)
    {
        return $container->services['Reconmap\\Controllers\\Vault\\VaultRouter'] = new \Reconmap\Controllers\Vault\VaultRouter();
    }

    /**
     * Gets the public 'Reconmap\Controllers\Vulnerabilities\BulkUpdateVulnerabilitiesController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Vulnerabilities\BulkUpdateVulnerabilitiesController
     */
    protected static function getBulkUpdateVulnerabilitiesControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Vulnerabilities\\BulkUpdateVulnerabilitiesController'] = $instance = new \Reconmap\Controllers\Vulnerabilities\BulkUpdateVulnerabilitiesController(($container->services['Reconmap\\Repositories\\VulnerabilityRepository'] ??= new \Reconmap\Repositories\VulnerabilityRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\AuditLogService'] ?? self::getAuditLogServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Vulnerabilities\Categories\CreateVulnerabilityCategoryController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Vulnerabilities\Categories\CreateVulnerabilityCategoryController
     */
    protected static function getCreateVulnerabilityCategoryControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Vulnerabilities\\Categories\\CreateVulnerabilityCategoryController'] = $instance = new \Reconmap\Controllers\Vulnerabilities\Categories\CreateVulnerabilityCategoryController(($container->services['Reconmap\\Repositories\\VulnerabilityCategoryRepository'] ??= new \Reconmap\Repositories\VulnerabilityCategoryRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Vulnerabilities\Categories\DeleteVulnerabilityCategoryController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Vulnerabilities\Categories\DeleteVulnerabilityCategoryController
     */
    protected static function getDeleteVulnerabilityCategoryControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Vulnerabilities\\Categories\\DeleteVulnerabilityCategoryController'] = $instance = new \Reconmap\Controllers\Vulnerabilities\Categories\DeleteVulnerabilityCategoryController(($container->services['Reconmap\\Services\\Security\\AuthorisationService'] ??= new \Reconmap\Services\Security\AuthorisationService()), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)), ($container->services['Reconmap\\Repositories\\VulnerabilityCategoryRepository'] ??= new \Reconmap\Repositories\VulnerabilityCategoryRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Vulnerabilities\Categories\GetVulnerabilityCategoriesController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Vulnerabilities\Categories\GetVulnerabilityCategoriesController
     */
    protected static function getGetVulnerabilityCategoriesControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Vulnerabilities\\Categories\\GetVulnerabilityCategoriesController'] = $instance = new \Reconmap\Controllers\Vulnerabilities\Categories\GetVulnerabilityCategoriesController(($container->services['Reconmap\\Repositories\\VulnerabilityCategoryRepository'] ??= new \Reconmap\Repositories\VulnerabilityCategoryRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Vulnerabilities\Categories\GetVulnerabilityChildrenCategoriesController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Vulnerabilities\Categories\GetVulnerabilityChildrenCategoriesController
     */
    protected static function getGetVulnerabilityChildrenCategoriesControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Vulnerabilities\\Categories\\GetVulnerabilityChildrenCategoriesController'] = $instance = new \Reconmap\Controllers\Vulnerabilities\Categories\GetVulnerabilityChildrenCategoriesController(($container->services['Reconmap\\Repositories\\VulnerabilityCategoryRepository'] ??= new \Reconmap\Repositories\VulnerabilityCategoryRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Vulnerabilities\Categories\UpdateVulnerabilityCategoryController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Vulnerabilities\Categories\UpdateVulnerabilityCategoryController
     */
    protected static function getUpdateVulnerabilityCategoryControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Vulnerabilities\\Categories\\UpdateVulnerabilityCategoryController'] = $instance = new \Reconmap\Controllers\Vulnerabilities\Categories\UpdateVulnerabilityCategoryController(($container->services['Reconmap\\Repositories\\VulnerabilityCategoryRepository'] ??= new \Reconmap\Repositories\VulnerabilityCategoryRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Vulnerabilities\CloneVulnerabilityController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Vulnerabilities\CloneVulnerabilityController
     */
    protected static function getCloneVulnerabilityControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Vulnerabilities\\CloneVulnerabilityController'] = $instance = new \Reconmap\Controllers\Vulnerabilities\CloneVulnerabilityController(($container->services['Reconmap\\Repositories\\VulnerabilityRepository'] ??= new \Reconmap\Repositories\VulnerabilityRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Vulnerabilities\CreateVulnerabilityController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Vulnerabilities\CreateVulnerabilityController
     */
    protected static function getCreateVulnerabilityControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Vulnerabilities\\CreateVulnerabilityController'] = $instance = new \Reconmap\Controllers\Vulnerabilities\CreateVulnerabilityController(($container->services['Reconmap\\Repositories\\VulnerabilityRepository'] ??= new \Reconmap\Repositories\VulnerabilityRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\CustomFieldRepository'] ??= new \Reconmap\Repositories\CustomFieldRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Vulnerabilities\DeleteVulnerabilityController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Vulnerabilities\DeleteVulnerabilityController
     */
    protected static function getDeleteVulnerabilityControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Vulnerabilities\\DeleteVulnerabilityController'] = $instance = new \Reconmap\Controllers\Vulnerabilities\DeleteVulnerabilityController(($container->services['Reconmap\\Services\\Security\\AuthorisationService'] ??= new \Reconmap\Services\Security\AuthorisationService()), ($container->services['Reconmap\\Repositories\\VulnerabilityRepository'] ??= new \Reconmap\Repositories\VulnerabilityRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Vulnerabilities\GetVulnerabilitiesController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Vulnerabilities\GetVulnerabilitiesController
     */
    protected static function getGetVulnerabilitiesControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Vulnerabilities\\GetVulnerabilitiesController'] = $instance = new \Reconmap\Controllers\Vulnerabilities\GetVulnerabilitiesController(($container->services['Reconmap\\Repositories\\VulnerabilityRepository'] ??= new \Reconmap\Repositories\VulnerabilityRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\SearchCriterias\\VulnerabilitySearchCriteria'] ??= new \Reconmap\Repositories\SearchCriterias\VulnerabilitySearchCriteria()));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Vulnerabilities\GetVulnerabilitiesStatsController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Vulnerabilities\GetVulnerabilitiesStatsController
     */
    protected static function getGetVulnerabilitiesStatsControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Vulnerabilities\\GetVulnerabilitiesStatsController'] = $instance = new \Reconmap\Controllers\Vulnerabilities\GetVulnerabilitiesStatsController(($container->services['Reconmap\\Repositories\\VulnerabilityStatsRepository'] ??= new \Reconmap\Repositories\VulnerabilityStatsRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Vulnerabilities\GetVulnerabilityController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Vulnerabilities\GetVulnerabilityController
     */
    protected static function getGetVulnerabilityControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Vulnerabilities\\GetVulnerabilityController'] = $instance = new \Reconmap\Controllers\Vulnerabilities\GetVulnerabilityController(($container->services['Reconmap\\Repositories\\VulnerabilityRepository'] ??= new \Reconmap\Repositories\VulnerabilityRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Vulnerabilities\UpdateVulnerabilityController' shared autowired service.
     *
     * @return \Reconmap\Controllers\Vulnerabilities\UpdateVulnerabilityController
     */
    protected static function getUpdateVulnerabilityControllerService($container)
    {
        $container->services['Reconmap\\Controllers\\Vulnerabilities\\UpdateVulnerabilityController'] = $instance = new \Reconmap\Controllers\Vulnerabilities\UpdateVulnerabilityController(($container->services['Reconmap\\Repositories\\VulnerabilityRepository'] ??= new \Reconmap\Repositories\VulnerabilityRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\ActivityPublisherService'] ?? self::getActivityPublisherServiceService($container)));

        $instance->setContainer(($container->services['Psr\\Container\\ContainerInterface'] ?? $container->get('Psr\\Container\\ContainerInterface', 1)));

        return $instance;
    }

    /**
     * Gets the public 'Reconmap\Controllers\Vulnerabilities\VulnerabilitiesRouter' shared autowired service.
     *
     * @return \Reconmap\Controllers\Vulnerabilities\VulnerabilitiesRouter
     */
    protected static function getVulnerabilitiesRouterService($container)
    {
        return $container->services['Reconmap\\Controllers\\Vulnerabilities\\VulnerabilitiesRouter'] = new \Reconmap\Controllers\Vulnerabilities\VulnerabilitiesRouter();
    }

    /**
     * Gets the public 'Reconmap\Database\CommandTestDataGenerator' shared autowired service.
     *
     * @return \Reconmap\Database\CommandTestDataGenerator
     */
    protected static function getCommandTestDataGeneratorService($container)
    {
        return $container->services['Reconmap\\Database\\CommandTestDataGenerator'] = new \Reconmap\Database\CommandTestDataGenerator(($container->services['Reconmap\\Repositories\\CommandRepository'] ??= new \Reconmap\Repositories\CommandRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Database\ConnectionFactory' shared autowired service.
     *
     * @return \Reconmap\Database\ConnectionFactory
     */
    protected static function getConnectionFactoryService($container)
    {
        return $container->services['Reconmap\\Database\\ConnectionFactory'] = new \Reconmap\Database\ConnectionFactory();
    }

    /**
     * Gets the public 'Reconmap\Database\DatabaseSchemaMigrator' shared autowired service.
     *
     * @return \Reconmap\Database\DatabaseSchemaMigrator
     */
    protected static function getDatabaseSchemaMigratorService($container)
    {
        return $container->services['Reconmap\\Database\\DatabaseSchemaMigrator'] = new \Reconmap\Database\DatabaseSchemaMigrator(($container->services['mysqli'] ?? $container->get('mysqli', 1)), ($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)), ($container->services['Monolog\\Logger'] ?? $container->get('Monolog\\Logger', 1)));
    }

    /**
     * Gets the public 'Reconmap\Database\NoteTestDataGenerator' shared autowired service.
     *
     * @return \Reconmap\Database\NoteTestDataGenerator
     */
    protected static function getNoteTestDataGeneratorService($container)
    {
        return $container->services['Reconmap\\Database\\NoteTestDataGenerator'] = new \Reconmap\Database\NoteTestDataGenerator(($container->services['Reconmap\\Repositories\\NoteRepository'] ??= new \Reconmap\Repositories\NoteRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Database\NullColumnReplacer' shared autowired service.
     *
     * @return \Reconmap\Database\NullColumnReplacer
     */
    protected static function getNullColumnReplacerService($container)
    {
        return $container->services['Reconmap\\Database\\NullColumnReplacer'] = new \Reconmap\Database\NullColumnReplacer();
    }

    /**
     * Gets the public 'Reconmap\Database\ProjectTestDataGenerator' shared autowired service.
     *
     * @return \Reconmap\Database\ProjectTestDataGenerator
     */
    protected static function getProjectTestDataGeneratorService($container)
    {
        return $container->services['Reconmap\\Database\\ProjectTestDataGenerator'] = new \Reconmap\Database\ProjectTestDataGenerator(($container->services['Reconmap\\Repositories\\ProjectRepository'] ??= new \Reconmap\Repositories\ProjectRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Database\TaskTestDataGenerator' shared autowired service.
     *
     * @return \Reconmap\Database\TaskTestDataGenerator
     */
    protected static function getTaskTestDataGeneratorService($container)
    {
        return $container->services['Reconmap\\Database\\TaskTestDataGenerator'] = new \Reconmap\Database\TaskTestDataGenerator(($container->services['Reconmap\\Repositories\\TaskRepository'] ??= new \Reconmap\Repositories\TaskRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Database\TestDataGenerator' shared autowired service.
     *
     * @return \Reconmap\Database\TestDataGenerator
     */
    protected static function getTestDataGeneratorService($container)
    {
        return $container->services['Reconmap\\Database\\TestDataGenerator'] = new \Reconmap\Database\TestDataGenerator(($container->services['Reconmap\\Database\\UserTestDataGenerator'] ?? self::getUserTestDataGeneratorService($container)), ($container->services['Reconmap\\Repositories\\ContactRepository'] ??= new \Reconmap\Repositories\ContactRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\ClientRepository'] ??= new \Reconmap\Repositories\ClientRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Database\\ProjectTestDataGenerator'] ?? self::getProjectTestDataGeneratorService($container)), ($container->services['Reconmap\\Database\\NoteTestDataGenerator'] ?? self::getNoteTestDataGeneratorService($container)), ($container->services['Reconmap\\Repositories\\DocumentRepository'] ??= new \Reconmap\Repositories\DocumentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Database\\TaskTestDataGenerator'] ?? self::getTaskTestDataGeneratorService($container)), ($container->services['Reconmap\\Database\\VulnerabilityTestDataGenerator'] ?? self::getVulnerabilityTestDataGeneratorService($container)), ($container->services['Reconmap\\Repositories\\NotificationsRepository'] ??= new \Reconmap\Repositories\NotificationsRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\ReportRepository'] ??= new \Reconmap\Repositories\ReportRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\ProjectUserRepository'] ??= new \Reconmap\Repositories\ProjectUserRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\TargetRepository'] ??= new \Reconmap\Repositories\TargetRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Database\\CommandTestDataGenerator'] ?? self::getCommandTestDataGeneratorService($container)));
    }

    /**
     * Gets the public 'Reconmap\Database\UserTestDataGenerator' shared autowired service.
     *
     * @return \Reconmap\Database\UserTestDataGenerator
     */
    protected static function getUserTestDataGeneratorService($container)
    {
        return $container->services['Reconmap\\Database\\UserTestDataGenerator'] = new \Reconmap\Database\UserTestDataGenerator(($container->services['Reconmap\\Repositories\\UserRepository'] ??= new \Reconmap\Repositories\UserRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Database\VulnerabilityTestDataGenerator' shared autowired service.
     *
     * @return \Reconmap\Database\VulnerabilityTestDataGenerator
     */
    protected static function getVulnerabilityTestDataGeneratorService($container)
    {
        return $container->services['Reconmap\\Database\\VulnerabilityTestDataGenerator'] = new \Reconmap\Database\VulnerabilityTestDataGenerator(($container->services['Reconmap\\Repositories\\VulnerabilityRepository'] ??= new \Reconmap\Repositories\VulnerabilityRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Http\AuthMiddleware' shared autowired service.
     *
     * @return \Reconmap\Http\AuthMiddleware
     */
    protected static function getAuthMiddlewareService($container)
    {
        return $container->services['Reconmap\\Http\\AuthMiddleware'] = new \Reconmap\Http\AuthMiddleware(($container->services['Reconmap\\Repositories\\UserRepository'] ??= new \Reconmap\Repositories\UserRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\KeycloakService'] ??= new \Reconmap\Services\KeycloakService(($container->services['Monolog\\Logger'] ?? $container->get('Monolog\\Logger', 1)), ($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)))), ($container->services['Monolog\\Logger'] ?? $container->get('Monolog\\Logger', 1)), ($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)));
    }

    /**
     * Gets the public 'Reconmap\Http\CorsMiddleware' shared autowired service.
     *
     * @return \Reconmap\Http\CorsMiddleware
     */
    protected static function getCorsMiddlewareService($container)
    {
        return $container->services['Reconmap\\Http\\CorsMiddleware'] = new \Reconmap\Http\CorsMiddleware(($container->services['Reconmap\\Http\\CorsResponseDecorator'] ??= new \Reconmap\Http\CorsResponseDecorator(($container->services['Monolog\\Logger'] ?? $container->get('Monolog\\Logger', 1)), ($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Http\CorsResponseDecorator' shared autowired service.
     *
     * @return \Reconmap\Http\CorsResponseDecorator
     */
    protected static function getCorsResponseDecoratorService($container)
    {
        return $container->services['Reconmap\\Http\\CorsResponseDecorator'] = new \Reconmap\Http\CorsResponseDecorator(($container->services['Monolog\\Logger'] ?? $container->get('Monolog\\Logger', 1)), ($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)));
    }

    /**
     * Gets the public 'Reconmap\Http\SecurityMiddleware' shared autowired service.
     *
     * @return \Reconmap\Http\SecurityMiddleware
     */
    protected static function getSecurityMiddlewareService($container)
    {
        return $container->services['Reconmap\\Http\\SecurityMiddleware'] = new \Reconmap\Http\SecurityMiddleware(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)));
    }

    /**
     * Gets the public 'Reconmap\Http\StaticMiddleware' shared autowired service.
     *
     * @return \Reconmap\Http\StaticMiddleware
     */
    protected static function getStaticMiddlewareService($container)
    {
        return $container->services['Reconmap\\Http\\StaticMiddleware'] = new \Reconmap\Http\StaticMiddleware(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)), ($container->services['Reconmap\\Services\\RedisServer'] ?? self::getRedisServerService($container)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\AttachmentRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\AttachmentRepository
     */
    protected static function getAttachmentRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\AttachmentRepository'] = new \Reconmap\Repositories\AttachmentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\AuditLogRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\AuditLogRepository
     */
    protected static function getAuditLogRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\AuditLogRepository'] = new \Reconmap\Repositories\AuditLogRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\ClientContactRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\ClientContactRepository
     */
    protected static function getClientContactRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\ClientContactRepository'] = new \Reconmap\Repositories\ClientContactRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\ClientRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\ClientRepository
     */
    protected static function getClientRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\ClientRepository'] = new \Reconmap\Repositories\ClientRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\CommandRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\CommandRepository
     */
    protected static function getCommandRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\CommandRepository'] = new \Reconmap\Repositories\CommandRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\CommandScheduleRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\CommandScheduleRepository
     */
    protected static function getCommandScheduleRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\CommandScheduleRepository'] = new \Reconmap\Repositories\CommandScheduleRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\CommandUsageRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\CommandUsageRepository
     */
    protected static function getCommandUsageRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\CommandUsageRepository'] = new \Reconmap\Repositories\CommandUsageRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\ContactRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\ContactRepository
     */
    protected static function getContactRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\ContactRepository'] = new \Reconmap\Repositories\ContactRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\CustomFieldRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\CustomFieldRepository
     */
    protected static function getCustomFieldRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\CustomFieldRepository'] = new \Reconmap\Repositories\CustomFieldRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\DocumentRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\DocumentRepository
     */
    protected static function getDocumentRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\DocumentRepository'] = new \Reconmap\Repositories\DocumentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\Exporters\AuditLogExporter' shared autowired service.
     *
     * @return \Reconmap\Repositories\Exporters\AuditLogExporter
     */
    protected static function getAuditLogExporterService($container)
    {
        return $container->services['Reconmap\\Repositories\\Exporters\\AuditLogExporter'] = new \Reconmap\Repositories\Exporters\AuditLogExporter(($container->services['Reconmap\\Repositories\\AuditLogRepository'] ??= new \Reconmap\Repositories\AuditLogRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Repositories\Exporters\ClientsExporter' shared autowired service.
     *
     * @return \Reconmap\Repositories\Exporters\ClientsExporter
     */
    protected static function getClientsExporterService($container)
    {
        return $container->services['Reconmap\\Repositories\\Exporters\\ClientsExporter'] = new \Reconmap\Repositories\Exporters\ClientsExporter(($container->services['Reconmap\\Repositories\\ClientRepository'] ??= new \Reconmap\Repositories\ClientRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Repositories\Exporters\CommandsExporter' shared autowired service.
     *
     * @return \Reconmap\Repositories\Exporters\CommandsExporter
     */
    protected static function getCommandsExporterService($container)
    {
        return $container->services['Reconmap\\Repositories\\Exporters\\CommandsExporter'] = new \Reconmap\Repositories\Exporters\CommandsExporter(($container->services['Reconmap\\Repositories\\CommandRepository'] ??= new \Reconmap\Repositories\CommandRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Repositories\Exporters\DocumentsExporter' shared autowired service.
     *
     * @return \Reconmap\Repositories\Exporters\DocumentsExporter
     */
    protected static function getDocumentsExporterService($container)
    {
        return $container->services['Reconmap\\Repositories\\Exporters\\DocumentsExporter'] = new \Reconmap\Repositories\Exporters\DocumentsExporter(($container->services['Reconmap\\Repositories\\DocumentRepository'] ??= new \Reconmap\Repositories\DocumentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Repositories\Exporters\Exportables' shared autowired service.
     *
     * @return \Reconmap\Repositories\Exporters\Exportables
     */
    protected static function getExportablesService($container)
    {
        return $container->services['Reconmap\\Repositories\\Exporters\\Exportables'] = new \Reconmap\Repositories\Exporters\Exportables();
    }

    /**
     * Gets the public 'Reconmap\Repositories\Exporters\ProjectTemplatesExporter' shared autowired service.
     *
     * @return \Reconmap\Repositories\Exporters\ProjectTemplatesExporter
     */
    protected static function getProjectTemplatesExporterService($container)
    {
        return $container->services['Reconmap\\Repositories\\Exporters\\ProjectTemplatesExporter'] = new \Reconmap\Repositories\Exporters\ProjectTemplatesExporter(($container->services['Reconmap\\Repositories\\ProjectTemplateRepository'] ??= new \Reconmap\Repositories\ProjectTemplateRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Repositories\Exporters\ProjectsExporter' shared autowired service.
     *
     * @return \Reconmap\Repositories\Exporters\ProjectsExporter
     */
    protected static function getProjectsExporterService($container)
    {
        return $container->services['Reconmap\\Repositories\\Exporters\\ProjectsExporter'] = new \Reconmap\Repositories\Exporters\ProjectsExporter(($container->services['Reconmap\\Repositories\\ProjectRepository'] ??= new \Reconmap\Repositories\ProjectRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Repositories\Exporters\TargetsExporter' shared autowired service.
     *
     * @return \Reconmap\Repositories\Exporters\TargetsExporter
     */
    protected static function getTargetsExporterService($container)
    {
        return $container->services['Reconmap\\Repositories\\Exporters\\TargetsExporter'] = new \Reconmap\Repositories\Exporters\TargetsExporter(($container->services['Reconmap\\Repositories\\TargetRepository'] ??= new \Reconmap\Repositories\TargetRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Repositories\Exporters\TasksExporter' shared autowired service.
     *
     * @return \Reconmap\Repositories\Exporters\TasksExporter
     */
    protected static function getTasksExporterService($container)
    {
        return $container->services['Reconmap\\Repositories\\Exporters\\TasksExporter'] = new \Reconmap\Repositories\Exporters\TasksExporter(($container->services['Reconmap\\Repositories\\TaskRepository'] ??= new \Reconmap\Repositories\TaskRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Repositories\Exporters\UsersExporter' shared autowired service.
     *
     * @return \Reconmap\Repositories\Exporters\UsersExporter
     */
    protected static function getUsersExporterService($container)
    {
        return $container->services['Reconmap\\Repositories\\Exporters\\UsersExporter'] = new \Reconmap\Repositories\Exporters\UsersExporter(($container->services['Reconmap\\Repositories\\UserRepository'] ??= new \Reconmap\Repositories\UserRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Repositories\Exporters\VulnerabilitiesExporter' shared autowired service.
     *
     * @return \Reconmap\Repositories\Exporters\VulnerabilitiesExporter
     */
    protected static function getVulnerabilitiesExporterService($container)
    {
        return $container->services['Reconmap\\Repositories\\Exporters\\VulnerabilitiesExporter'] = new \Reconmap\Repositories\Exporters\VulnerabilitiesExporter(($container->services['Reconmap\\Repositories\\VulnerabilityRepository'] ??= new \Reconmap\Repositories\VulnerabilityRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Repositories\Exporters\VulnerabilityCategoriesExporter' shared autowired service.
     *
     * @return \Reconmap\Repositories\Exporters\VulnerabilityCategoriesExporter
     */
    protected static function getVulnerabilityCategoriesExporterService($container)
    {
        return $container->services['Reconmap\\Repositories\\Exporters\\VulnerabilityCategoriesExporter'] = new \Reconmap\Repositories\Exporters\VulnerabilityCategoriesExporter(($container->services['Reconmap\\Repositories\\VulnerabilityCategoryRepository'] ??= new \Reconmap\Repositories\VulnerabilityCategoryRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Repositories\Exporters\VulnerabilityTemplatesExporter' shared autowired service.
     *
     * @return \Reconmap\Repositories\Exporters\VulnerabilityTemplatesExporter
     */
    protected static function getVulnerabilityTemplatesExporterService($container)
    {
        return $container->services['Reconmap\\Repositories\\Exporters\\VulnerabilityTemplatesExporter'] = new \Reconmap\Repositories\Exporters\VulnerabilityTemplatesExporter(($container->services['Reconmap\\Repositories\\VulnerabilityTemplateRepository'] ??= new \Reconmap\Repositories\VulnerabilityTemplateRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Repositories\Importers\CommandsImporter' shared autowired service.
     *
     * @return \Reconmap\Repositories\Importers\CommandsImporter
     */
    protected static function getCommandsImporterService($container)
    {
        return $container->services['Reconmap\\Repositories\\Importers\\CommandsImporter'] = new \Reconmap\Repositories\Importers\CommandsImporter(($container->services['Reconmap\\Repositories\\CommandRepository'] ??= new \Reconmap\Repositories\CommandRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Repositories\Importers\DocumentsImporter' shared autowired service.
     *
     * @return \Reconmap\Repositories\Importers\DocumentsImporter
     */
    protected static function getDocumentsImporterService($container)
    {
        return $container->services['Reconmap\\Repositories\\Importers\\DocumentsImporter'] = new \Reconmap\Repositories\Importers\DocumentsImporter(($container->services['Reconmap\\Repositories\\DocumentRepository'] ??= new \Reconmap\Repositories\DocumentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Repositories\Importers\Importables' shared autowired service.
     *
     * @return \Reconmap\Repositories\Importers\Importables
     */
    protected static function getImportablesService($container)
    {
        return $container->services['Reconmap\\Repositories\\Importers\\Importables'] = new \Reconmap\Repositories\Importers\Importables();
    }

    /**
     * Gets the public 'Reconmap\Repositories\Importers\ProjectsImporter' shared autowired service.
     *
     * @return \Reconmap\Repositories\Importers\ProjectsImporter
     */
    protected static function getProjectsImporterService($container)
    {
        return $container->services['Reconmap\\Repositories\\Importers\\ProjectsImporter'] = new \Reconmap\Repositories\Importers\ProjectsImporter(($container->services['Reconmap\\Repositories\\ProjectRepository'] ??= new \Reconmap\Repositories\ProjectRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\ProjectUserRepository'] ??= new \Reconmap\Repositories\ProjectUserRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\TaskRepository'] ??= new \Reconmap\Repositories\TaskRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Repositories\Importers\TargetsImporter' shared autowired service.
     *
     * @return \Reconmap\Repositories\Importers\TargetsImporter
     */
    protected static function getTargetsImporterService($container)
    {
        return $container->services['Reconmap\\Repositories\\Importers\\TargetsImporter'] = new \Reconmap\Repositories\Importers\TargetsImporter(($container->services['Reconmap\\Repositories\\TargetRepository'] ??= new \Reconmap\Repositories\TargetRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Repositories\Importers\TasksImporter' shared autowired service.
     *
     * @return \Reconmap\Repositories\Importers\TasksImporter
     */
    protected static function getTasksImporterService($container)
    {
        return $container->services['Reconmap\\Repositories\\Importers\\TasksImporter'] = new \Reconmap\Repositories\Importers\TasksImporter(($container->services['Reconmap\\Repositories\\TaskRepository'] ??= new \Reconmap\Repositories\TaskRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Repositories\Importers\VulnerabilitiesImporter' shared autowired service.
     *
     * @return \Reconmap\Repositories\Importers\VulnerabilitiesImporter
     */
    protected static function getVulnerabilitiesImporterService($container)
    {
        return $container->services['Reconmap\\Repositories\\Importers\\VulnerabilitiesImporter'] = new \Reconmap\Repositories\Importers\VulnerabilitiesImporter(($container->services['Reconmap\\Repositories\\VulnerabilityRepository'] ??= new \Reconmap\Repositories\VulnerabilityRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Repositories\Importers\VulnerabilityTemplatesImporter' shared autowired service.
     *
     * @return \Reconmap\Repositories\Importers\VulnerabilityTemplatesImporter
     */
    protected static function getVulnerabilityTemplatesImporterService($container)
    {
        return $container->services['Reconmap\\Repositories\\Importers\\VulnerabilityTemplatesImporter'] = new \Reconmap\Repositories\Importers\VulnerabilityTemplatesImporter(($container->services['Reconmap\\Repositories\\VulnerabilityRepository'] ??= new \Reconmap\Repositories\VulnerabilityRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Repositories\IntegrationsRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\IntegrationsRepository
     */
    protected static function getIntegrationsRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\IntegrationsRepository'] = new \Reconmap\Repositories\IntegrationsRepository(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)), ($container->services['Reconmap\\CommandOutputParsers\\ProcessorFactory'] ?? $container->get('Reconmap\\CommandOutputParsers\\ProcessorFactory', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\NoteRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\NoteRepository
     */
    protected static function getNoteRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\NoteRepository'] = new \Reconmap\Repositories\NoteRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\NotificationsRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\NotificationsRepository
     */
    protected static function getNotificationsRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\NotificationsRepository'] = new \Reconmap\Repositories\NotificationsRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\OrganisationRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\OrganisationRepository
     */
    protected static function getOrganisationRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\OrganisationRepository'] = new \Reconmap\Repositories\OrganisationRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\ProjectCategoriesRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\ProjectCategoriesRepository
     */
    protected static function getProjectCategoriesRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\ProjectCategoriesRepository'] = new \Reconmap\Repositories\ProjectCategoriesRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\ProjectRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\ProjectRepository
     */
    protected static function getProjectRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\ProjectRepository'] = new \Reconmap\Repositories\ProjectRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\ProjectTemplateRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\ProjectTemplateRepository
     */
    protected static function getProjectTemplateRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\ProjectTemplateRepository'] = new \Reconmap\Repositories\ProjectTemplateRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\ProjectUserRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\ProjectUserRepository
     */
    protected static function getProjectUserRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\ProjectUserRepository'] = new \Reconmap\Repositories\ProjectUserRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\ReportConfigurationRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\ReportConfigurationRepository
     */
    protected static function getReportConfigurationRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\ReportConfigurationRepository'] = new \Reconmap\Repositories\ReportConfigurationRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\ReportRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\ReportRepository
     */
    protected static function getReportRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\ReportRepository'] = new \Reconmap\Repositories\ReportRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\SearchCriterias\CommandSearchCriteria' shared autowired service.
     *
     * @return \Reconmap\Repositories\SearchCriterias\CommandSearchCriteria
     */
    protected static function getCommandSearchCriteriaService($container)
    {
        return $container->services['Reconmap\\Repositories\\SearchCriterias\\CommandSearchCriteria'] = new \Reconmap\Repositories\SearchCriterias\CommandSearchCriteria();
    }

    /**
     * Gets the public 'Reconmap\Repositories\SearchCriterias\ProjectSearchCriteria' shared autowired service.
     *
     * @return \Reconmap\Repositories\SearchCriterias\ProjectSearchCriteria
     */
    protected static function getProjectSearchCriteriaService($container)
    {
        return $container->services['Reconmap\\Repositories\\SearchCriterias\\ProjectSearchCriteria'] = new \Reconmap\Repositories\SearchCriterias\ProjectSearchCriteria();
    }

    /**
     * Gets the public 'Reconmap\Repositories\SearchCriterias\TargetSearchCriteria' shared autowired service.
     *
     * @return \Reconmap\Repositories\SearchCriterias\TargetSearchCriteria
     */
    protected static function getTargetSearchCriteriaService($container)
    {
        return $container->services['Reconmap\\Repositories\\SearchCriterias\\TargetSearchCriteria'] = new \Reconmap\Repositories\SearchCriterias\TargetSearchCriteria();
    }

    /**
     * Gets the public 'Reconmap\Repositories\SearchCriterias\TaskSearchCriteria' shared autowired service.
     *
     * @return \Reconmap\Repositories\SearchCriterias\TaskSearchCriteria
     */
    protected static function getTaskSearchCriteriaService($container)
    {
        return $container->services['Reconmap\\Repositories\\SearchCriterias\\TaskSearchCriteria'] = new \Reconmap\Repositories\SearchCriterias\TaskSearchCriteria();
    }

    /**
     * Gets the public 'Reconmap\Repositories\SearchCriterias\VaultSearchCriteria' shared autowired service.
     *
     * @return \Reconmap\Repositories\SearchCriterias\VaultSearchCriteria
     */
    protected static function getVaultSearchCriteriaService($container)
    {
        return $container->services['Reconmap\\Repositories\\SearchCriterias\\VaultSearchCriteria'] = new \Reconmap\Repositories\SearchCriterias\VaultSearchCriteria();
    }

    /**
     * Gets the public 'Reconmap\Repositories\SearchCriterias\VulnerabilityCategoryCriteria' shared autowired service.
     *
     * @return \Reconmap\Repositories\SearchCriterias\VulnerabilityCategoryCriteria
     */
    protected static function getVulnerabilityCategoryCriteriaService($container)
    {
        return $container->services['Reconmap\\Repositories\\SearchCriterias\\VulnerabilityCategoryCriteria'] = new \Reconmap\Repositories\SearchCriterias\VulnerabilityCategoryCriteria();
    }

    /**
     * Gets the public 'Reconmap\Repositories\SearchCriterias\VulnerabilitySearchCriteria' shared autowired service.
     *
     * @return \Reconmap\Repositories\SearchCriterias\VulnerabilitySearchCriteria
     */
    protected static function getVulnerabilitySearchCriteriaService($container)
    {
        return $container->services['Reconmap\\Repositories\\SearchCriterias\\VulnerabilitySearchCriteria'] = new \Reconmap\Repositories\SearchCriterias\VulnerabilitySearchCriteria();
    }

    /**
     * Gets the public 'Reconmap\Repositories\TargetRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\TargetRepository
     */
    protected static function getTargetRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\TargetRepository'] = new \Reconmap\Repositories\TargetRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\TaskRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\TaskRepository
     */
    protected static function getTaskRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\TaskRepository'] = new \Reconmap\Repositories\TaskRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\UserRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\UserRepository
     */
    protected static function getUserRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\UserRepository'] = new \Reconmap\Repositories\UserRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\VaultRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\VaultRepository
     */
    protected static function getVaultRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\VaultRepository'] = new \Reconmap\Repositories\VaultRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\VulnerabilityCategoryRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\VulnerabilityCategoryRepository
     */
    protected static function getVulnerabilityCategoryRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\VulnerabilityCategoryRepository'] = new \Reconmap\Repositories\VulnerabilityCategoryRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\VulnerabilityRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\VulnerabilityRepository
     */
    protected static function getVulnerabilityRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\VulnerabilityRepository'] = new \Reconmap\Repositories\VulnerabilityRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\VulnerabilityStatsRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\VulnerabilityStatsRepository
     */
    protected static function getVulnerabilityStatsRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\VulnerabilityStatsRepository'] = new \Reconmap\Repositories\VulnerabilityStatsRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Repositories\VulnerabilityTemplateRepository' shared autowired service.
     *
     * @return \Reconmap\Repositories\VulnerabilityTemplateRepository
     */
    protected static function getVulnerabilityTemplateRepositoryService($container)
    {
        return $container->services['Reconmap\\Repositories\\VulnerabilityTemplateRepository'] = new \Reconmap\Repositories\VulnerabilityTemplateRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)));
    }

    /**
     * Gets the public 'Reconmap\Services\ActivityPublisherService' shared autowired service.
     *
     * @return \Reconmap\Services\ActivityPublisherService
     */
    protected static function getActivityPublisherServiceService($container)
    {
        return $container->services['Reconmap\\Services\\ActivityPublisherService'] = new \Reconmap\Services\ActivityPublisherService(($container->services['Reconmap\\Services\\AuditLogService'] ?? self::getAuditLogServiceService($container)), ($container->services['Reconmap\\Repositories\\IntegrationsRepository'] ??= new \Reconmap\Repositories\IntegrationsRepository(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)), ($container->services['Reconmap\\CommandOutputParsers\\ProcessorFactory'] ?? $container->get('Reconmap\\CommandOutputParsers\\ProcessorFactory', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Services\ApplicationContainer' shared autowired service.
     *
     * @return \Reconmap\Services\ApplicationContainer
     */
    protected static function getApplicationContainerService($container)
    {
        return $container->services['Reconmap\\Services\\ApplicationContainer'] = new \Reconmap\Services\ApplicationContainer();
    }

    /**
     * Gets the public 'Reconmap\Services\AuditLogService' shared autowired service.
     *
     * @return \Reconmap\Services\AuditLogService
     */
    protected static function getAuditLogServiceService($container)
    {
        return $container->services['Reconmap\\Services\\AuditLogService'] = new \Reconmap\Services\AuditLogService(($container->services['Reconmap\\Repositories\\AuditLogRepository'] ??= new \Reconmap\Repositories\AuditLogRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\NetworkService'] ??= new \Reconmap\Services\NetworkService()));
    }

    /**
     * Gets the public 'Reconmap\Services\Cvss' shared autowired service.
     *
     * @return \Reconmap\Services\Cvss
     */
    protected static function getCvssService($container)
    {
        return $container->services['Reconmap\\Services\\Cvss'] = new \Reconmap\Services\Cvss();
    }

    /**
     * Gets the public 'Reconmap\Services\EmailService' shared autowired service.
     *
     * @return \Reconmap\Services\EmailService
     */
    protected static function getEmailServiceService($container)
    {
        return $container->services['Reconmap\\Services\\EmailService'] = new \Reconmap\Services\EmailService(($container->services['Reconmap\\Services\\TemplateEngine'] ??= new \Reconmap\Services\TemplateEngine(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)))), ($container->services['Reconmap\\Services\\RedisServer'] ?? self::getRedisServerService($container)), ($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)), ($container->services['Monolog\\Logger'] ?? $container->get('Monolog\\Logger', 1)));
    }

    /**
     * Gets the public 'Reconmap\Services\Environment' shared autowired service.
     *
     * @return \Reconmap\Services\Environment
     */
    protected static function getEnvironmentService($container)
    {
        return $container->services['Reconmap\\Services\\Environment'] = new \Reconmap\Services\Environment();
    }

    /**
     * Gets the public 'Reconmap\Services\Filesystem\AttachmentFilePath' shared autowired service.
     *
     * @return \Reconmap\Services\Filesystem\AttachmentFilePath
     */
    protected static function getAttachmentFilePathService($container)
    {
        return $container->services['Reconmap\\Services\\Filesystem\\AttachmentFilePath'] = new \Reconmap\Services\Filesystem\AttachmentFilePath(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)));
    }

    /**
     * Gets the public 'Reconmap\Services\Filesystem\DirectoryChecker' shared autowired service.
     *
     * @return \Reconmap\Services\Filesystem\DirectoryChecker
     */
    protected static function getDirectoryCheckerService($container)
    {
        return $container->services['Reconmap\\Services\\Filesystem\\DirectoryChecker'] = new \Reconmap\Services\Filesystem\DirectoryChecker();
    }

    /**
     * Gets the public 'Reconmap\Services\JwtPayloadCreator' shared autowired service.
     *
     * @return \Reconmap\Services\JwtPayloadCreator
     */
    protected static function getJwtPayloadCreatorService($container)
    {
        return $container->services['Reconmap\\Services\\JwtPayloadCreator'] = new \Reconmap\Services\JwtPayloadCreator(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)));
    }

    /**
     * Gets the public 'Reconmap\Services\KeycloakService' shared autowired service.
     *
     * @return \Reconmap\Services\KeycloakService
     */
    protected static function getKeycloakServiceService($container)
    {
        return $container->services['Reconmap\\Services\\KeycloakService'] = new \Reconmap\Services\KeycloakService(($container->services['Monolog\\Logger'] ?? $container->get('Monolog\\Logger', 1)), ($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)));
    }

    /**
     * Gets the public 'Reconmap\Services\Logging\LoggingConfigurator' shared autowired service.
     *
     * @return \Reconmap\Services\Logging\LoggingConfigurator
     */
    protected static function getLoggingConfiguratorService($container)
    {
        return $container->services['Reconmap\\Services\\Logging\\LoggingConfigurator'] = new \Reconmap\Services\Logging\LoggingConfigurator(($container->services['Monolog\\Logger'] ?? $container->get('Monolog\\Logger', 1)), ($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)));
    }

    /**
     * Gets the public 'Reconmap\Services\NetworkService' shared autowired service.
     *
     * @return \Reconmap\Services\NetworkService
     */
    protected static function getNetworkServiceService($container)
    {
        return $container->services['Reconmap\\Services\\NetworkService'] = new \Reconmap\Services\NetworkService();
    }

    /**
     * Gets the public 'Reconmap\Services\ObjectCaster' shared autowired service.
     *
     * @return \Reconmap\Services\ObjectCaster
     */
    protected static function getObjectCasterService($container)
    {
        return $container->services['Reconmap\\Services\\ObjectCaster'] = new \Reconmap\Services\ObjectCaster();
    }

    /**
     * Gets the public 'Reconmap\Services\PaginationRequestHandler' shared autowired service.
     *
     * @return \Reconmap\Services\PaginationRequestHandler
     */
    protected static function getPaginationRequestHandlerService($container)
    {
        return $container->services['Reconmap\\Services\\PaginationRequestHandler'] = new \Reconmap\Services\PaginationRequestHandler(($container->services['Psr\\Http\\Message\\ServerRequestInterface'] ?? $container->get('Psr\\Http\\Message\\ServerRequestInterface', 1)));
    }

    /**
     * Gets the public 'Reconmap\Services\PasswordGenerator' shared autowired service.
     *
     * @return \Reconmap\Services\PasswordGenerator
     */
    protected static function getPasswordGeneratorService($container)
    {
        return $container->services['Reconmap\\Services\\PasswordGenerator'] = new \Reconmap\Services\PasswordGenerator();
    }

    /**
     * Gets the public 'Reconmap\Services\QueueProcessor' shared autowired service.
     *
     * @return \Reconmap\Services\QueueProcessor
     */
    protected static function getQueueProcessorService($container)
    {
        return $container->services['Reconmap\\Services\\QueueProcessor'] = new \Reconmap\Services\QueueProcessor(($container->services['Reconmap\\Services\\RedisServer'] ?? self::getRedisServerService($container)), ($container->services['Monolog\\Logger'] ?? $container->get('Monolog\\Logger', 1)));
    }

    /**
     * Gets the public 'Reconmap\Services\RedisServer' shared autowired service.
     *
     * @return \Reconmap\Services\RedisServer
     */
    protected static function getRedisServerService($container)
    {
        return $container->services['Reconmap\\Services\\RedisServer'] = new \Reconmap\Services\RedisServer(($container->services['Reconmap\\Services\\Environment'] ??= new \Reconmap\Services\Environment()));
    }

    /**
     * Gets the public 'Reconmap\Services\Reporting\ReportDataCollector' shared autowired service.
     *
     * @return \Reconmap\Services\Reporting\ReportDataCollector
     */
    protected static function getReportDataCollectorService($container)
    {
        return $container->services['Reconmap\\Services\\Reporting\\ReportDataCollector'] = new \Reconmap\Services\Reporting\ReportDataCollector(($container->services['Reconmap\\Repositories\\ProjectRepository'] ??= new \Reconmap\Repositories\ProjectRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\ReportRepository'] ??= new \Reconmap\Repositories\ReportRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\ReportConfigurationRepository'] ??= new \Reconmap\Repositories\ReportConfigurationRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\VulnerabilityRepository'] ??= new \Reconmap\Repositories\VulnerabilityRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\VulnerabilityCategoryRepository'] ??= new \Reconmap\Repositories\VulnerabilityCategoryRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\OrganisationRepository'] ??= new \Reconmap\Repositories\OrganisationRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\UserRepository'] ??= new \Reconmap\Repositories\UserRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\ClientRepository'] ??= new \Reconmap\Repositories\ClientRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\TaskRepository'] ??= new \Reconmap\Repositories\TaskRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\TargetRepository'] ??= new \Reconmap\Repositories\TargetRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\ContactRepository'] ??= new \Reconmap\Repositories\ContactRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\AttachmentRepository'] ??= new \Reconmap\Repositories\AttachmentRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\Filesystem\\AttachmentFilePath'] ??= new \Reconmap\Services\Filesystem\AttachmentFilePath(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)))), ($container->services['Reconmap\\Repositories\\VaultRepository'] ??= new \Reconmap\Repositories\VaultRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Services\Reporting\ReportGenerator' shared autowired service.
     *
     * @return \Reconmap\Services\Reporting\ReportGenerator
     */
    protected static function getReportGeneratorService($container)
    {
        return $container->services['Reconmap\\Services\\Reporting\\ReportGenerator'] = new \Reconmap\Services\Reporting\ReportGenerator(($container->services['Reconmap\\Services\\Reporting\\ReportDataCollector'] ?? self::getReportDataCollectorService($container)), ($container->services['Reconmap\\Services\\TemplateEngine'] ??= new \Reconmap\Services\TemplateEngine(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)))));
    }

    /**
     * Gets the public 'Reconmap\Services\Reporting\TemplateProcessFactory' shared autowired service.
     *
     * @return \Reconmap\Services\Reporting\TemplateProcessFactory
     */
    protected static function getTemplateProcessFactoryService($container)
    {
        return $container->services['Reconmap\\Services\\Reporting\\TemplateProcessFactory'] = new \Reconmap\Services\Reporting\TemplateProcessFactory();
    }

    /**
     * Gets the public 'Reconmap\Services\Reporting\WeeklyReportGenerator' shared autowired service.
     *
     * @return \Reconmap\Services\Reporting\WeeklyReportGenerator
     */
    protected static function getWeeklyReportGeneratorService($container)
    {
        return $container->services['Reconmap\\Services\\Reporting\\WeeklyReportGenerator'] = new \Reconmap\Services\Reporting\WeeklyReportGenerator(($container->services['Reconmap\\Repositories\\ProjectRepository'] ??= new \Reconmap\Repositories\ProjectRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\UserRepository'] ??= new \Reconmap\Repositories\UserRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\TaskRepository'] ??= new \Reconmap\Repositories\TaskRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Services\\EmailService'] ?? self::getEmailServiceService($container)), ($container->services['Monolog\\Logger'] ?? $container->get('Monolog\\Logger', 1)));
    }

    /**
     * Gets the public 'Reconmap\Services\SearchListener' shared autowired service.
     *
     * @return \Reconmap\Services\SearchListener
     */
    protected static function getSearchListenerService($container)
    {
        return $container->services['Reconmap\\Services\\SearchListener'] = new \Reconmap\Services\SearchListener(($container->services['Reconmap\\Services\\RedisServer'] ?? self::getRedisServerService($container)));
    }

    /**
     * Gets the public 'Reconmap\Services\Security\AuthorisationService' shared autowired service.
     *
     * @return \Reconmap\Services\Security\AuthorisationService
     */
    protected static function getAuthorisationServiceService($container)
    {
        return $container->services['Reconmap\\Services\\Security\\AuthorisationService'] = new \Reconmap\Services\Security\AuthorisationService();
    }

    /**
     * Gets the public 'Reconmap\Services\Security\Permissions' shared autowired service.
     *
     * @return \Reconmap\Services\Security\Permissions
     */
    protected static function getPermissionsService($container)
    {
        return $container->services['Reconmap\\Services\\Security\\Permissions'] = new \Reconmap\Services\Security\Permissions();
    }

    /**
     * Gets the public 'Reconmap\Services\TemplateEngine' shared autowired service.
     *
     * @return \Reconmap\Services\TemplateEngine
     */
    protected static function getTemplateEngineService($container)
    {
        return $container->services['Reconmap\\Services\\TemplateEngine'] = new \Reconmap\Services\TemplateEngine(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)));
    }

    /**
     * Gets the public 'Reconmap\Tasks\EmailTaskProcessor' shared autowired service.
     *
     * @return \Reconmap\Tasks\EmailTaskProcessor
     */
    protected static function getEmailTaskProcessorService($container)
    {
        return $container->services['Reconmap\\Tasks\\EmailTaskProcessor'] = new \Reconmap\Tasks\EmailTaskProcessor(($container->services['Reconmap\\Services\\ApplicationConfig'] ?? $container->get('Reconmap\\Services\\ApplicationConfig', 1)), ($container->services['Monolog\\Logger'] ?? $container->get('Monolog\\Logger', 1)));
    }

    /**
     * Gets the public 'Reconmap\Tasks\TaskResultProcessor' shared autowired service.
     *
     * @return \Reconmap\Tasks\TaskResultProcessor
     */
    protected static function getTaskResultProcessorService($container)
    {
        return $container->services['Reconmap\\Tasks\\TaskResultProcessor'] = new \Reconmap\Tasks\TaskResultProcessor(($container->services['Monolog\\Logger'] ?? $container->get('Monolog\\Logger', 1)), ($container->services['Reconmap\\Services\\RedisServer'] ?? self::getRedisServerService($container)), ($container->services['Reconmap\\Repositories\\VulnerabilityRepository'] ??= new \Reconmap\Repositories\VulnerabilityRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\NotificationsRepository'] ??= new \Reconmap\Repositories\NotificationsRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\TaskRepository'] ??= new \Reconmap\Repositories\TaskRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\Repositories\\TargetRepository'] ??= new \Reconmap\Repositories\TargetRepository(($container->services['mysqli'] ?? $container->get('mysqli', 1)))), ($container->services['Reconmap\\CommandOutputParsers\\ProcessorFactory'] ?? $container->get('Reconmap\\CommandOutputParsers\\ProcessorFactory', 1)));
    }
}
